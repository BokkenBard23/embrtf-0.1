#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        print("=" * 60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("processor_test.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        from optimized_embedding_processor import OptimizedEmbeddingProcessor
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è RTX 3060
        processor = OptimizedEmbeddingProcessor(
            batch_size=32,  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è RTX 3060
            max_length=2048  # –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        )
        
        print(f"üéØ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {processor.device}")
        print(f"üìä –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {processor.batch_size}")
        print(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {processor.max_length}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö
        test_cases = [
            ("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ç–µ—Å—Ç", 5),
            ("–°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç", 50),
            ("–ë–æ–ª—å—à–æ–π —Ç–µ—Å—Ç", 200)
        ]
        
        for test_name, num_texts in test_cases:
            print(f"\nüî¨ {test_name} ({num_texts} —Ç–µ–∫—Å—Ç–æ–≤)")
            print("-" * 40)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
            test_texts = [
                f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–º–µ—Ä {i+1} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤. "
                f"–≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º {processor.max_length} —Å–∏–º–≤–æ–ª–æ–≤. "
                f"–°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."
                for i in range(num_texts)
            ]
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã
                print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤...")
                embeddings = processor.process_texts_batch(test_texts)
                
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(embeddings)} —Ç–µ–∫—Å—Ç–æ–≤")
                print(f"üìä –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {embeddings.shape}")
                print(f"üíæ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {embeddings.dtype}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
                memory = processor._get_memory_usage()
                if processor.device == "cuda":
                    print(f"üíæ GPU –ø–∞–º—è—Ç—å: {memory['gpu_allocated']:.2f}GB/{memory['gpu_total']:.2f}GB")
                    print(f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {memory['gpu_allocated']/memory['gpu_total']*100:.1f}%")
                
                # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                del embeddings
                processor._unload_model()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {test_name}: {e}")
                continue
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
