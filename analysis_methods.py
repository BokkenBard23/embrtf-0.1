# analysis_methods.py
"""
–ú–æ–¥—É–ª—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤.
–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ gui.py.
"""

import logging
import ollama
import time
import json

# === –ò–º–ø–æ—Ä—Ç –¥–ª—è fast_phrase_classifier ===
from classifier import classify_dialog_with_phrases, load_phrase_dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

OLLAMA_MODEL_NAME = "dimweb/ilyagusev-saiga_llama3_8b:kto_v5_Q4_K"


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Ollama —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ ===
def call_ollama_with_retry(prompt, model_name=OLLAMA_MODEL_NAME, max_retries=3, delay=1):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç Ollama —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    """
    for attempt in range(max_retries):
        try:
            logger.info(f"–í—ã–∑–æ–≤ Ollama (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries})...")
            response = ollama.chat(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                options={
                    "num_ctx": 4096,
                    "num_gpu": -1
                }
            )
            time.sleep(delay)
            return response["message"]["content"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Ollama (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(delay * 2)
            else:
                raise e


# === –ü–æ–¥—Ö–æ–¥ 1: –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π (–º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π) –∞–Ω–∞–ª–∏–∑ ===
def hierarchical_analysis(question, found_with_scores, chunk_size=10, status_callback=None):
    try:
        total_found = len(found_with_scores)
        if status_callback:
            status_callback(f"üß† –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_found} –¥–∏–∞–ª–æ–≥–æ–≤...")

        summaries = []
        num_chunks = (total_found + chunk_size - 1) // chunk_size
        for i in range(0, len(found_with_scores), chunk_size):
            chunk_num = i // chunk_size + 1
            if status_callback:
                status_callback(f"üß† –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {chunk_num}/{num_chunks}...")

            chunk = found_with_scores[i:i + chunk_size]
            chunk_context_parts = []
            for item, score in chunk:
                text_snippet = item['text'][:800] + ("..." if len(item['text']) > 800 else "")
                chunk_context_parts.append(f"[–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f}] ID: {item['id']}\n{text_snippet}")
            
            chunk_context = "\n---\n".join(chunk_context_parts)
            chunk_prompt = (
                f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤ –∏ –∫—Ä–∞—Ç–∫–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                f"–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.\n"
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–§—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤:\n{chunk_context}\n"
                f"–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:"
            )
            
            try:
                summary = call_ollama_with_retry(chunk_prompt)
                summaries.append(f"–ì—Ä—É–ø–ø–∞ {chunk_num} (–¥–∏–∞–ª–æ–≥–∏ {i+1}-{min(i+chunk_size, total_found)}):\n{summary}")
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ {chunk_num}/{num_chunks}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {chunk_num}: {e}"
                logger.error(error_msg)
                summaries.append(f"–ì—Ä—É–ø–ø–∞ {chunk_num}: –û–®–ò–ë–ö–ê - {str(e)}")

        if not summaries:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."

        if status_callback:
            status_callback("üß† –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è...")

        final_context = "\n\n".join(summaries)
        final_prompt = (
            f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–∏–∞–ª–æ–≥–æ–≤, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –æ—Ç–≤–µ—Ç—ã –∏ –¥–∞–π—Ç–µ –æ–±—â–∏–π, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. "
            f"–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º.\n"
            f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
            f"–û—Ç–≤–µ—Ç—ã –ø–æ –≥—Ä—É–ø–ø–∞–º:\n{final_context}\n"
            f"–û–±—â–∏–π –æ—Ç–≤–µ—Ç:"
        )
        
        try:
            final_answer = call_ollama_with_retry(final_prompt)
        except Exception as e:
            final_answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {e}\n\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n{final_context}"

        context_text = f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_found} –¥–∏–∞–ª–æ–≥–æ–≤.\n\n"
        for item, score in found_with_scores:
            context_text += f"ID: {item['id']}\n–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f}\n–¢–µ–∫—Å—Ç: {item['text'][:300]}...\n---\n"

        return final_answer, context_text

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ hierarchical_analysis: {e}"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}", f"–û—à–∏–±–∫–∞: {error_msg}"


# === –ü–æ–¥—Ö–æ–¥ 2: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Rolling Summary) ===
def rolling_summary_analysis(question, found_with_scores, chunk_size=5, status_callback=None):
    try:
        total_found = len(found_with_scores)
        if status_callback:
            status_callback(f"üß† –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_found} –¥–∏–∞–ª–æ–≥–æ–≤...")

        summary = "–ù–∞—á–∞–ª—å–Ω—ã–π –∏—Ç–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        processed_count = 0

        for i in range(0, len(found_with_scores), chunk_size):
            if status_callback:
                status_callback(f"üß† –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {min(i+chunk_size, total_found)}/{total_found}...")

            chunk = found_with_scores[i:i + chunk_size]
            chunk_context_parts = []
            for item, score in chunk:
                text_snippet = item['text'][:500] + ("..." if len(item['text']) > 500 else "")
                chunk_context_parts.append(f"[–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f}] ID: {item['id']}\n{text_snippet}")
            
            chunk_context = "\n---\n".join(chunk_context_parts)
            
            prompt = (
                f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. "
                f"–í–æ–ø—Ä–æ—Å: {question}\n"
                f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥: {summary}\n"
                f"–ù–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —É—á–µ—Ç–∞:\n{chunk_context}\n"
                f"–û–±–Ω–æ–≤–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥, —É—á–∏—Ç—ã–≤–∞—è –Ω–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ."
            )
            
            try:
                summary = call_ollama_with_retry(prompt)
                processed_count += len(chunk)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∏—Ç–æ–≥ –ø–æ—Å–ª–µ {processed_count} –¥–∏–∞–ª–æ–≥–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Ç–æ–≥–∞: {e}")
                summary += f"\n[–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {processed_count//chunk_size + 1}: {e}]"

        final_prompt = (
            f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –∏—Ç–æ–≥–∞, –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥: {summary}\n"
            f"–û—Ç–≤–µ—Ç:"
        )
        
        if status_callback:
            status_callback("üß† –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞...")

        try:
            final_answer = call_ollama_with_retry(final_prompt)
        except Exception as e:
            final_answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ: {e}\n\n–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –∏—Ç–æ–≥:\n{summary}"

        context_text = f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_found} –¥–∏–∞–ª–æ–≥–æ–≤ –º–µ—Ç–æ–¥–æ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
        for item, score in found_with_scores:
            context_text += f"ID: {item['id']}\n–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f}\n–¢–µ–∫—Å—Ç: {item['text'][:300]}...\n---\n"

        return final_answer, context_text

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ rolling_summary_analysis: {e}"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}", f"–û—à–∏–±–∫–∞: {error_msg}"


# === –ü–æ–¥—Ö–æ–¥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤ (Information Extraction) ===
def fact_extraction_analysis(question, found_with_scores, chunk_size=10, status_callback=None):
    try:
        total_found = len(found_with_scores)
        if status_callback:
            status_callback(f"üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_found} –¥–∏–∞–ª–æ–≥–æ–≤...")

        all_facts = []
        num_chunks = (total_found + chunk_size - 1) // chunk_size
        for i in range(0, len(found_with_scores), chunk_size):
            chunk_num = i // chunk_size + 1
            if status_callback:
                status_callback(f"üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {chunk_num}/{num_chunks}...")

            chunk = found_with_scores[i:i + chunk_size]
            chunk_context_parts = []
            for item, score in chunk:
                text_snippet = item['text'][:1000] + ("..." if len(item['text']) > 1000 else "")
                chunk_context_parts.append(f"[–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f}] ID: {item['id']}\n{text_snippet}")
            
            chunk_context = "\n---\n".join(chunk_context_parts)
            
            prompt = (
                f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤, "
                f"–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                f"–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç–æ–≤, –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç - –æ–¥–∏–Ω —Ñ–∞–∫—Ç. "
                f"–ï—Å–ª–∏ –≤ –¥–∏–∞–ª–æ–≥–µ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–∞–ø–∏—à–∏ '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'.\n"
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
                f"–î–∏–∞–ª–æ–≥–∏:\n{chunk_context}\n"
                f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:"
            )
            
            try:
                facts = call_ollama_with_retry(prompt)
                all_facts.append(f"–ì—Ä—É–ø–ø–∞ {chunk_num}:\n{facts}")
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã —Ñ–∞–∫—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã {chunk_num}/{num_chunks}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {chunk_num}: {e}"
                logger.error(error_msg)
                all_facts.append(f"–ì—Ä—É–ø–ø–∞ {chunk_num}: –û–®–ò–ë–ö–ê - {str(e)}")

        if not all_facts:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∞–∫—Ç—ã.", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."

        if status_callback:
            status_callback("üß† –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤: –∞–≥—Ä–µ–≥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑...")

        facts_summary = "\n\n".join(all_facts)
        analysis_prompt = (
            f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å. "
            f"–ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ —á–∞—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. "
            f"–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏—Ç–µ –æ–± —ç—Ç–æ–º.\n"
            f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
            f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n{facts_summary}\n"
            f"–ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç–≤–µ—Ç:"
        )
        
        try:
            final_answer = call_ollama_with_retry(analysis_prompt)
        except Exception as e:
            final_answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–∫—Ç–æ–≤: {e}\n\n–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n{facts_summary}"

        context_text = f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_found} –¥–∏–∞–ª–æ–≥–æ–≤. –ò–∑–≤–ª–µ—á–µ–Ω—ã —Ñ–∞–∫—Ç—ã.\n\n"
        context_text += f"–í—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n{facts_summary}\n\n"
        context_text += "–ü–æ–ª–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤:\n"
        for item, score in found_with_scores:
            context_text += f"ID: {item['id']}\n–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f}\n–¢–µ–∫—Å—Ç: {item['text'][:300]}...\n---\n"

        return final_answer, context_text

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ fact_extraction_analysis: {e}"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}", f"–û—à–∏–±–∫–∞: {error_msg}"


# === –ü–æ–¥—Ö–æ–¥ 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ ===
def classification_analysis(question, found_with_scores, categories=None, status_callback=None):
    try:
        total_found = len(found_with_scores)
        if status_callback:
            status_callback(f"üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_found} –¥–∏–∞–ª–æ–≥–æ–≤...")

        if not categories:
            category_prompt = (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{question}'. "
                f"–û–ø—Ä–µ–¥–µ–ª–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–∏–ø–∞ –∑–≤–æ–Ω–∫–∞), "
                f"–ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏. "
                f"–û—Ç–≤–µ—Ç—å —Å–ø–∏—Å–∫–æ–º, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É."
            )
            try:
                categories_response = call_ollama_with_retry(category_prompt)
                categories = [cat.strip() for cat in categories_response.strip().split('\n') if cat.strip()]
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
                categories = ["–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã", "–ñ–∞–ª–æ–±–∞", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]

        if status_callback:
            status_callback(f"üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {categories}. –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–∏–∞–ª–æ–≥–æ–≤...")

        classified_dialogs = {cat: [] for cat in categories}
        classified_dialogs["–ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ"] = []
        
        for i, (item, score) in enumerate(found_with_scores):
            if status_callback and i % 10 == 0:
                status_callback(f"üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{total_found} –¥–∏–∞–ª–æ–≥–æ–≤...")

            text_snippet = item['text'][:800] + ("..." if len(item['text']) > 800 else "")
            prompt = (
                f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. "
                f"–ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ '–ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ'.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories)}\n"
                f"–î–∏–∞–ª–æ–≥:\n{text_snippet}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è:"
            )
            
            try:
                category_response = call_ollama_with_retry(prompt)
                determined_category = category_response.strip()
                if determined_category in classified_dialogs:
                    classified_dialogs[determined_category].append((item, score))
                else:
                    classified_dialogs["–ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ"].append((item, score))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ {item['id']}: {e}")
                classified_dialogs["–ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ"].append((item, score))

        if status_callback:
            status_callback("üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

        analysis_lines = []
        context_lines = [f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_found} –¥–∏–∞–ª–æ–≥–æ–≤.\n"]
        for category, dialogs in classified_dialogs.items():
            count = len(dialogs)
            analysis_lines.append(f"- {category}: {count} –¥–∏–∞–ª–æ–≥–æ–≤")
            if dialogs:
                context_lines.append(f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} ({count} –¥–∏–∞–ª–æ–≥–æ–≤)")
                for item, score in dialogs[:3]:
                    context_lines.append(f"  ID: {item['id']} (–°—Ö–æ–∂–µ—Å—Ç—å: {score:.4f})")
                if len(dialogs) > 3:
                    context_lines.append(f"  ... –∏ –µ—â—ë {len(dialogs) - 3} –¥–∏–∞–ª–æ–≥–æ–≤.")

        analysis_text = "\n".join(analysis_lines)
        context_text = "\n".join(context_lines)

        final_prompt = (
            f"–í—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤. "
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö –∏ –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ –∑–≤–æ–Ω–∫–æ–≤. "
            f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –Ω–µ–π.\n"
            f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n{analysis_text}\n"
            f"–í—ã–≤–æ–¥:"
        )
        
        try:
            final_answer = call_ollama_with_retry(final_prompt)
        except Exception as e:
            final_answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n{analysis_text}"

        return final_answer, context_text

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ classification_analysis: {e}"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}", f"–û—à–∏–±–∫–∞: {error_msg}"


# === –ü–æ–¥—Ö–æ–¥ 5: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –æ–±—Ä–∞—Ç–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º (–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ 1-4) ‚Äî –ß–ò–°–¢–´–ô LLM-–ê–ù–ê–õ–ò–ó ===
def callback_classifier(question, found_with_scores, chunk_size=1, status_callback=None):
    try:
        total_found = len(found_with_scores)
        if status_callback:
            status_callback(f"üìû LLM-–∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_found} –¥–∏–∞–ª–æ–≥–æ–≤...")

        dialog_texts = {}
        for item, score in found_with_scores:
            dialog_id = item['dialog_id']
            if dialog_id not in dialog_texts:
                dialog_texts[dialog_id] = item['full_dialog_text']

        results = []
        context_lines = []

        for dialog_id, full_text in dialog_texts.items():
            if status_callback:
                status_callback(f"üìû –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ {dialog_id}...")

            prompt = f"""–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞ call-—Ü–µ–Ω—Ç—Ä–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞.

–ü—Ä–∞–≤–∏–ª–∞:
1. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —Å–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç (–±–µ–∑ —Å–ª–æ–≤ "–µ—Å–ª–∏ —á—Ç–æ", "–∫–∞–∫-–Ω–∏–±—É–¥—å", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–æ–∑–º–æ–∂–Ω–æ", "–Ω–µ –∑–Ω–∞—é", "—Å –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞") ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –û–ë–Ø–ó–ê–ù –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫. –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞ (–ö–∞—Ç–µ–≥–æ—Ä–∏—è 1).
2. –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ (—Å –≤—Ä–µ–º–µ–Ω–µ–º, —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, —É–º–µ—Å—Ç–Ω–æ) ‚Äî –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2.
3. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª "–µ—Å–ª–∏ —á—Ç–æ", "–∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–Ω–µ –∑–Ω–∞—é" ‚Äî –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –ù–ï —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –µ–≥–æ –Ω–∞–∑–Ω–∞—á–∏–ª ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞ (–ö–∞—Ç–µ–≥–æ—Ä–∏—è 3).
4. –ï—Å–ª–∏ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω ‚Äî –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4).

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥.
- –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1, 2, 3, 4).
- –í—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {{"category": N, "client_phrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"], "operator_phrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"]}}
- –§—Ä–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –î–û–°–õ–û–í–ù–´–ú–ò, –∫–∞–∫ –≤ –¥–∏–∞–ª–æ–≥–µ.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –ø–∏—à–∏ "–¥—É–º–∞—é", –Ω–µ –¥–æ–±–∞–≤–ª—è–π markdown.
- –ï—Å–ª–∏ —Ñ—Ä–∞–∑ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ [].
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ—Ä–∞–∑—ã. –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
{{"category": 1, "client_phrases": ["—è —Å–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω—é –≤–µ—á–µ—Ä–æ–º"], "operator_phrases": []}}

–î–∏–∞–ª–æ–≥:
{full_text}
"""

            try:
                llm_response = call_ollama_with_retry(prompt)
                result = json.loads(llm_response)
                if "category" not in result or "client_phrases" not in result or "operator_phrases" not in result:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM")
                result["dialog_id"] = dialog_id
                results.append(result)

                cat_names = {
                    1: "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫",
                    2: "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫",
                    3: "‚ö†Ô∏è –ù–µ–Ω—É–∂–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω",
                    4: "‚úîÔ∏è –ó–≤–æ–Ω–æ–∫ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                }
                context_lines.append(f"ID: {dialog_id} | {cat_names[result['category']]}")
                if result['client_phrases']:
                    context_lines.append(f"  –ö–ª–∏–µ–Ω—Ç: {', '.join(result['client_phrases'])}")
                if result['operator_phrases']:
                    context_lines.append(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä: {', '.join(result['operator_phrases'])}")
                context_lines.append("---")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞ {dialog_id}: {e}")
                results.append({
                    "dialog_id": dialog_id,
                    "category": 0,
                    "client_phrases": [],
                    "operator_phrases": [],
                    "error": str(e)
                })
                context_lines.append(f"ID: {dialog_id} | ‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {e}")
                context_lines.append("---")

        final_answer = json.dumps(results, ensure_ascii=False, indent=2)
        context_text = "üìû –†–µ–∑—É–ª—å—Ç–∞—Ç—ã LLM-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –æ–±—Ä–∞—Ç–Ω—ã–º –∑–≤–æ–Ω–∫–∞–º:\n\n" + "\n".join(context_lines)

        return final_answer, context_text

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ callback_classifier: {e}"
        logger.error(error_msg)
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}", f"–û—à–∏–±–∫–∞: {error_msg}"


# === –ë–´–°–¢–†–´–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–† –ù–ê –û–°–ù–û–í–ï –°–õ–û–í–ê–†–Ø ===
def fast_phrase_classifier(question, found_with_scores, chunk_size=1, status_callback=None):
    phrase_dict = None
    try:
        phrase_dict = load_phrase_dict()
    except Exception:
        phrase_dict = None

    results = []
    for item, score in found_with_scores:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ø–ª–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        client_lines = []
        dialog_text = item['full_dialog_text']
        lines = dialog_text.splitlines()
        for line in lines:
            if line.startswith("–ö–ª–∏–µ–Ω—Ç:") or line.startswith("–∫–ª–∏–µ–Ω—Ç:") or line.startswith("–ö–õ–ò–ï–ù–¢:"):
                client_lines.append(line)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ–ø–ª–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        category = 4  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        for client_line in client_lines:
            # –£–±–∏—Ä–∞–µ–º "–ö–ª–∏–µ–Ω—Ç:" –∏ –ø—Ä–æ–±–µ–ª—ã
            clean_client_line = client_line.replace("–ö–ª–∏–µ–Ω—Ç:", "").replace("–∫–ª–∏–µ–Ω—Ç:", "").strip()
            if clean_client_line:
                # –ò—â–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ
                if phrase_dict and any(phrase in clean_client_line for phrase in phrase_dict.get("category_1_phrases", {}).get("client", [])):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    if any(excl in clean_client_line for excl in phrase_dict.get("category_3_phrases", {}).get("client", [])):
                        category = 3
                    elif any(excl in clean_client_line for excl in phrase_dict.get("category_2_phrases", {}).get("operator", [])):
                        category = 2
                    else:
                        category = 1
                    break
        
        results.append({
            "dialog_id": item['dialog_id'],
            "category": category,
            "client_phrases": [],
            "operator_phrases": []
        })
    final_answer = json.dumps(results, ensure_ascii=False, indent=2)
    context_text = "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é."
    return final_answer, context_text


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ===
def get_analysis_method(method_name):
    methods = {
        "hierarchical": hierarchical_analysis,
        "rolling": rolling_summary_analysis,
        "facts": fact_extraction_analysis,
        "classification": classification_analysis,
        "callback_classifier": callback_classifier,
        "fast_phrase_classifier": fast_phrase_classifier,
    }
    return methods.get(method_name)