"""–û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GUI –¥–ª—è CallCenter AI v3 –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import sqlite3
import json
import threading
import time
from pathlib import Path
import config
from utils import get_db_connection
import logging
from datetime import datetime
from tkinter import simpledialog
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("gui_light.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class LightCallCenterGUI:
    """–û–±–ª–µ–≥—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GUI –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    
    def __init__(self, root):
        self.root = root
        self.root.title("CallCenter AI v3 - –û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π GUI")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        self.progress_vars = {}
        self.status_vars = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.init_chat_db()
        self.create_widgets()
        self.load_initial_data()
        
    def init_chat_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞."""
        try:
            self.conn = get_db_connection()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        self.create_data_management_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ü–æ–∏—Å–∫
        self.create_search_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_statistics_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –õ–æ–≥–∏
        self.create_logs_tab()
        
    def create_data_management_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
        self.data_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.data_frame, text="üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.data_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ CallCenter AI", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.create_data_controls()
        self.create_data_tables()
        
    def create_data_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = ttk.LabelFrame(self.data_frame, text="–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(controls_frame)
        buttons_frame.pack(fill='x')
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤
        self.view_dialogs_btn = tk.Button(buttons_frame, text="üí¨ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤", 
                                         command=self.view_dialogs, 
                                         bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                         width=20, height=2)
        self.view_dialogs_btn.pack(side='left', padx=5, pady=5)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ø–ª–∏–∫
        self.view_utterances_btn = tk.Button(buttons_frame, text="üó£Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ø–ª–∏–∫", 
                                            command=self.view_utterances, 
                                            bg='#2196F3', fg='white', font=('Arial', 10, 'bold'),
                                            width=20, height=2)
        self.view_utterances_btn.pack(side='left', padx=5, pady=5)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ—Ä–∞–∑
        self.view_phrases_btn = tk.Button(buttons_frame, text="üìù –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ—Ä–∞–∑", 
                                         command=self.view_phrases, 
                                         bg='#FF9800', fg='white', font=('Arial', 10, 'bold'),
                                         width=20, height=2)
        self.view_phrases_btn.pack(side='left', padx=5, pady=5)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        self.export_btn = tk.Button(buttons_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                                   command=self.export_data, 
                                   bg='#9C27B0', fg='white', font=('Arial', 10, 'bold'),
                                   width=20, height=2)
        self.export_btn.pack(side='left', padx=5, pady=5)
        
    def create_data_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        tables_frame = ttk.LabelFrame(self.data_frame, text="–¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö", padding=10)
        tables_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        columns = ('ID', '–¢–µ–∫—Å—Ç', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–î–∞—Ç–∞')
        self.data_tree = ttk.Treeview(tables_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.data_tree.heading(col, text=col)
            self.data_tree.column(col, width=200)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(tables_frame, orient='vertical', command=self.data_tree.yview)
        h_scrollbar = ttk.Scrollbar(tables_frame, orient='horizontal', command=self.data_tree.xview)
        self.data_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.data_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        tables_frame.grid_rowconfigure(0, weight=1)
        tables_frame.grid_columnconfigure(0, weight=1)
        
    def create_search_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞."""
        self.search_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.search_frame, text="üîç –ü–æ–∏—Å–∫")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.search_frame, text="–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.create_search_controls()
        self.create_search_results()
        
    def create_search_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º."""
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_frame = ttk.LabelFrame(self.search_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", padding=10)
        search_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_input_frame = tk.Frame(search_frame)
        search_input_frame.pack(fill='x', pady=5)
        
        tk.Label(search_input_frame, text="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", font=('Arial', 10, 'bold')).pack(anchor='w')
        self.search_entry = tk.Entry(search_input_frame, font=('Arial', 12), width=60)
        self.search_entry.pack(fill='x', pady=2)
        self.search_entry.bind('<Return>', lambda e: self.perform_search())
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        search_buttons_frame = tk.Frame(search_frame)
        search_buttons_frame.pack(fill='x', pady=10)
        
        self.search_btn = tk.Button(search_buttons_frame, text="üîç –ù–∞–π—Ç–∏", 
                                   command=self.perform_search, 
                                   bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                   width=15, height=2)
        self.search_btn.pack(side='left', padx=5)
        
        self.clear_results_btn = tk.Button(search_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                                          command=self.clear_results, 
                                          bg='#f44336', fg='white', font=('Arial', 10, 'bold'),
                                          width=15, height=2)
        self.clear_results_btn.pack(side='left', padx=5)
        
    def create_search_results(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
        results_frame = ttk.LabelFrame(self.search_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", padding=10)
        results_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ('ID', '–¢–µ–∫—Å—Ç', '–¢–∏–ø', '–î–∞—Ç–∞')
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.results_tree.heading(col, text=col)
            self.results_tree.column(col, width=200)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(results_frame, orient='vertical', command=self.results_tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient='horizontal', command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.results_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        results_frame.grid_rowconfigure(0, weight=1)
        results_frame.grid_columnconfigure(0, weight=1)
        
    def create_statistics_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_stats_controls()
        self.create_stats_display()
        
    def create_stats_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        controls_frame = ttk.LabelFrame(self.stats_frame, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_stats_btn = tk.Button(controls_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                                          command=self.refresh_statistics, 
                                          bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                          width=20, height=2)
        self.refresh_stats_btn.pack(pady=5)
        
    def create_stats_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats_display_frame = ttk.LabelFrame(self.stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", padding=10)
        stats_display_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_display = scrolledtext.ScrolledText(stats_display_frame, height=20, width=80, 
                                                      font=('Arial', 10))
        self.stats_display.pack(fill='both', expand=True)
        
    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤."""
        self.logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.logs_frame, text="üìã –õ–æ–≥–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.logs_frame, text="–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –ª–æ–≥–æ–≤
        self.create_logs_controls()
        self.create_logs_display()
        
    def create_logs_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏."""
        controls_frame = ttk.LabelFrame(self.logs_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(controls_frame)
        buttons_frame.pack(fill='x')
        
        self.clear_logs_btn = tk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                                       command=self.clear_logs, 
                                       bg='#f44336', fg='white', font=('Arial', 10, 'bold'),
                                       width=15, height=2)
        self.clear_logs_btn.pack(side='left', padx=5, pady=5)
        
        self.save_logs_btn = tk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", 
                                      command=self.save_logs, 
                                      bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                      width=15, height=2)
        self.save_logs_btn.pack(side='left', padx=5, pady=5)
        
    def create_logs_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤."""
        logs_display_frame = ttk.LabelFrame(self.logs_frame, text="–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        logs_display_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.logs_display = scrolledtext.ScrolledText(logs_display_frame, height=20, width=80, 
                                                     font=('Arial', 10))
        self.logs_display.pack(fill='both', expand=True)
        
    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.log_message("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            self.refresh_statistics()
            self.log_message("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.logs_display.insert(tk.END, f"[{timestamp}] {message}\n")
        self.logs_display.see(tk.END)
        self.root.update_idletasks()
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤."""
        self.logs_display.delete(1.0, tk.END)
        
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª."""
        filename = filedialog.asksaveasfilename(defaultextension=".txt", 
                                               filetypes=[("Text files", "*.txt")])
        if filename:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.logs_display.get(1.0, tk.END))
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
    def view_dialogs(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤."""
        self.log_message("üí¨ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT id, text, source_theme, processed_at FROM dialogs ORDER BY processed_at DESC LIMIT 100")
            results = cursor.fetchall()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.data_tree.get_children():
                self.data_tree.delete(item)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
            for row in results:
                text_preview = row[1][:100] + '...' if len(row[1]) > 100 else row[1]
                self.data_tree.insert('', 'end', values=(
                    row[0], text_preview, row[2], row[3]
                ))
            
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} –¥–∏–∞–ª–æ–≥–æ–≤")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏: {e}")
    
    def view_utterances(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ø–ª–∏–∫."""
        self.log_message("üó£Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–ª–∏–∫...")
        try:
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT u.id, u.text, u.speaker, d.processed_at
                FROM utterances u
                JOIN dialogs d ON u.dialog_id = d.id
                ORDER BY d.processed_at DESC, u.turn_order
                LIMIT 100
            """)
            results = cursor.fetchall()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.data_tree.get_children():
                self.data_tree.delete(item)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
            for row in results:
                text_preview = row[1][:100] + '...' if len(row[1]) > 100 else row[1]
                self.data_tree.insert('', 'end', values=(
                    row[0], text_preview, row[2], row[3]
                ))
            
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} —Ä–µ–ø–ª–∏–∫")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–ª–∏–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ø–ª–∏–∫–∏: {e}")
    
    def view_phrases(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤."""
        self.log_message("üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑...")
        try:
            cursor = self.conn.cursor()
            cursor.execute("SELECT id, phrase, source, processed_at FROM callback_phrases ORDER BY processed_at DESC LIMIT 100")
            results = cursor.fetchall()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            for item in self.data_tree.get_children():
                self.data_tree.delete(item)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
            for row in results:
                phrase_preview = row[1][:100] + '...' if len(row[1]) > 100 else row[1]
                self.data_tree.insert('', 'end', values=(
                    row[0], phrase_preview, row[2], row[3]
                ))
            
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} —Ñ—Ä–∞–∑")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã: {e}")
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö."""
        data_type = simpledialog.askstring("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                                          "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (dialogs/utterances/callback_phrases):")
        if not data_type:
            return
        
        filename = filedialog.asksaveasfilename(defaultextension=".json", 
                                               filetypes=[("JSON files", "*.json")])
        if not filename:
            return
        
        try:
            self.log_message(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç {data_type} –≤ {filename}")
            
            cursor = self.conn.cursor()
            if data_type == "dialogs":
                cursor.execute("SELECT * FROM dialogs")
            elif data_type == "utterances":
                cursor.execute("SELECT * FROM utterances")
            elif data_type == "callback_phrases":
                cursor.execute("SELECT * FROM callback_phrases")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
                return
            
            results = cursor.fetchall()
            columns = [description[0] for description in cursor.description]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data = [dict(zip(columns, row)) for row in results]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            self.log_message("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
    def perform_search(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞."""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        self.log_message(f"üîç –ü–æ–∏—Å–∫: {query}")
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.clear_results()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–ø–ª–∏–∫–∞–º
            cursor = self.conn.cursor()
            cursor.execute("""
                SELECT u.id, u.text, u.speaker, d.source_theme, d.processed_at
                FROM utterances u
                JOIN dialogs d ON u.dialog_id = d.id
                WHERE u.text LIKE ?
                ORDER BY d.processed_at DESC
                LIMIT 50
            """, (f"%{query}%",))
            
            results = cursor.fetchall()
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                text_preview = result[1][:100] + '...' if len(result[1]) > 100 else result[1]
                self.results_tree.insert('', 'end', values=(
                    result[0], text_preview, result[2], result[4]
                ))
            
            self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        self.log_message("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
    
    # –ú–µ—Ç–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def refresh_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        try:
            stats = self.get_statistics()
            self.display_statistics(stats)
            self.log_message("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats = {}
        cursor = self.conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM dialogs")
        stats['dialogs'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM utterances")
        stats['utterances'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM utterance_embeddings")
        stats['embeddings'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM callback_phrases")
        stats['callback_phrases'] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM qa_pairs")
        stats['qa_pairs'] = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
        cursor.execute("SELECT source_theme, COUNT(*) FROM dialogs GROUP BY source_theme")
        stats['themes'] = dict(cursor.fetchall())
        
        return stats
    
    def display_statistics(self, stats):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats_display.delete(1.0, tk.END)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_display.insert(tk.END, "=== –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n\n")
        self.stats_display.insert(tk.END, f"üìä –î–∏–∞–ª–æ–≥–æ–≤: {stats.get('dialogs', 0):,}\n")
        self.stats_display.insert(tk.END, f"üó£Ô∏è –†–µ–ø–ª–∏–∫: {stats.get('utterances', 0):,}\n")
        self.stats_display.insert(tk.END, f"üß† –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats.get('embeddings', 0):,}\n")
        self.stats_display.insert(tk.END, f"üìù –§—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {stats.get('callback_phrases', 0):,}\n")
        self.stats_display.insert(tk.END, f"‚ùì –ü–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç: {stats.get('qa_pairs', 0):,}\n\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
        if 'themes' in stats and stats['themes']:
            self.stats_display.insert(tk.END, "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ï–ú–ê–ú ===\n\n")
            for theme, count in stats['themes'].items():
                self.stats_display.insert(tk.END, f"üìÅ {theme}: {count:,} –¥–∏–∞–ª–æ–≥–æ–≤\n")
            self.stats_display.insert(tk.END, "\n")
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.stats_display.insert(tk.END, "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ===\n\n")
        self.stats_display.insert(tk.END, f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        self.stats_display.insert(tk.END, f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_PATH}\n")
        self.stats_display.insert(tk.END, f"üß† –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {config.EMBEDDING_MODEL_NAME}\n")
        self.stats_display.insert(tk.END, f"ü§ñ LLM –º–æ–¥–µ–ª—å: {config.LLM_MODEL_NAME}\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    root = tk.Tk()
    app = LightCallCenterGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
