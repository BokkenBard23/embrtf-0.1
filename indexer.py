"""–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ä–µ–ø–ª–∏–∫ (utterances) –≤ FAISS. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤.
   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: –±–∞—Ç—á–∏, –ª–æ–≥–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞, —ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏."""

import os
import json
import pickle
import sqlite3
import logging
from pathlib import Path
from datetime import datetime  # –ò–º–ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
import faiss
import numpy as np
from tqdm import tqdm

# === –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
import config

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(config.LOGS_ROOT / "indexer.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("Indexer")

BATCH_SIZE = 1024  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ FAISS

def get_themes_from_db(conn):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –∏–∑ –ë–î."""
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT source_theme FROM dialogs WHERE source_theme IS NOT NULL")
    themes = [row[0] for row in cursor.fetchall() if row[0]]
    return themes

def build_faiss_index_for_theme(theme_name, conn, index_path, ids_path):
    """–°—Ç—Ä–æ–∏—Ç FAISS-–∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã (–∏–ª–∏ 'all') –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø–ª–∏–∫."""
    logger.info(f"üîç –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è —Ç–µ–º—ã: '{theme_name}'...")

    # –ó–∞–ø—Ä–æ—Å: –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫ –¥–ª—è —Ç–µ–º—ã
    if theme_name == "all":
        count_query = "SELECT COUNT(*) FROM utterance_embeddings ue JOIN utterances u ON ue.utterance_id = u.id"
        fetch_query = """
            SELECT ue.utterance_id, ue.vector
            FROM utterance_embeddings ue
            JOIN utterances u ON ue.utterance_id = u.id
        """
    else:
        count_query = """
            SELECT COUNT(*)
            FROM utterance_embeddings ue
            JOIN utterances u ON ue.utterance_id = u.id
            JOIN dialogs d ON u.dialog_id = d.id
            WHERE d.source_theme = ?
        """
        fetch_query = """
            SELECT ue.utterance_id, ue.vector
            FROM utterance_embeddings ue
            JOIN utterances u ON ue.utterance_id = u.id
            JOIN dialogs d ON u.dialog_id = d.id
            WHERE d.source_theme = ?
        """

    cursor = conn.cursor()
    cursor.execute(count_query, (theme_name,) if theme_name != "all" else ())
    total = cursor.fetchone()[0]

    if total == 0:
        logger.warning(f"‚ö†Ô∏è –î–ª—è —Ç–µ–º—ã '{theme_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ø–ª–∏–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.")
        return False

    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {total} —Ä–µ–ø–ª–∏–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.")

    # –°–æ–∑–¥–∞—ë–º FAISS –∏–Ω–¥–µ–∫—Å
    dimension = config.EMBEDDING_MODEL_DIMENSION
    index = faiss.IndexFlatIP(dimension)  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ IndexIVFFlat –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤–µ–∫—Ç–æ—Ä–æ–≤

    utterance_ids = []
    offset = 0

    pbar = tqdm(total=total, desc=f"–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è '{theme_name}'", unit="—Ä–µ–ø–ª–∏–∫–∞")

    # –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π
    while offset < total:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        if theme_name == "all":
            params = (BATCH_SIZE, offset)
        else:
            params = (theme_name, BATCH_SIZE, offset)

        cursor.execute(fetch_query + " LIMIT ? OFFSET ?", params)
        rows = cursor.fetchall()

        if not rows:
            break

        vectors = []
        batch_ids = []

        for row in rows:
            utterance_id, vector_blob = row
            try:
                vector = pickle.loads(vector_blob)
                if isinstance(vector, np.ndarray):
                    vector = vector.astype('float32')
                else:
                    vector = np.array(vector, dtype='float32')
                vectors.append(vector)
                batch_ids.append(utterance_id)
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–∞ {utterance_id}: {e}")
                continue

        if vectors:
            vectors = np.array(vectors)
            faiss.normalize_L2(vectors)
            index.add(vectors)
            utterance_ids.extend(batch_ids)

        pbar.update(len(batch_ids))
        offset += BATCH_SIZE

    pbar.close()

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏ ID ---
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(index_path), exist_ok=True)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º FAISS –∏–Ω–¥–µ–∫—Å (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Path –≤ str)
        faiss.write_index(index, str(index_path))
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID
        with open(ids_path, 'w', encoding='utf-8') as f:
            json.dump(utterance_ids, f, ensure_ascii=False, indent=2)
        logger.info(f"‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è '{theme_name}' —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∞ –¥–∏—Å–∫: {index_path}, {len(utterance_ids)} —Ä–µ–ø–ª–∏–∫.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞/ID –¥–ª—è '{theme_name}' –Ω–∞ –¥–∏—Å–∫: {e}")
        return False

    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞ –≤ –ë–î ---
    try:
        meta_cursor = conn.cursor()
        meta_cursor.execute("""
            INSERT OR REPLACE INTO faiss_indexes (theme, index_path, ids_path, built_at)
            VALUES (?, ?, ?, ?)
        """, (theme_name, str(index_path), str(ids_path), datetime.now().isoformat()))
        conn.commit()
        logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è '{theme_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è '{theme_name}' –≤ –ë–î: {e}")
        conn.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –Ω–∞ –¥–∏—Å–∫–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω

    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤."""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è FAISS-–∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —Ä–µ–ø–ª–∏–∫...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect(config.DATABASE_PATH)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    themes = get_themes_from_db(conn)
    themes.append("all")  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é

    # –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
    for theme in themes:
        index_path = config.FAISS_INDEX_DIR / f"faiss_index_{theme}.index"
        ids_path = config.FAISS_INDEX_DIR / f"ids_{theme}.json"
        
        success = build_faiss_index_for_theme(theme, conn, index_path, ids_path)
        if not success:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–º—ã '{theme}'.")

    conn.close()
    logger.info("üèÅ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

if __name__ == "__main__":
    main()