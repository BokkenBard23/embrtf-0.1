"""GUI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤ call-—Ü–µ–Ω—Ç—Ä–∞ ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–∏—Å–∫–∞ –ø–æ —Ä–µ–ø–ª–∏–∫–∞–º, HyDE, Reranker, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º QA –∏ —á–∞—Ç–æ–º."""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import json
import numpy as np
import faiss
import sqlite3
import logging
import threading
import requests
import pickle
from datetime import datetime
from pathlib import Path

# === –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç ===
import config
from utils import setup_logger, get_db_connection

# === –ò–º–ø–æ—Ä—Ç —Ä–∞–±–æ—á–∏—Ö –º–æ–¥—É–ª–µ–π ===
import pipeline
import indexer
import init_db

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = setup_logger('GUI', config.LOGS_ROOT / "gui.log")

# === –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π ===
from sentence_transformers import SentenceTransformer
try:
    from sentence_transformers import CrossEncoder
    RERANKER_AVAILABLE = True
    reranker = CrossEncoder('BAAI/bge-reranker-large', max_length=512)
except Exception as e:
    logger.warning(f"Reranker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    RERANKER_AVAILABLE = False
    reranker = None

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
MODEL = None
INDEXES = {}        # {theme: faiss_index}
IDS = {}            # {theme: [utterance_id1, ...]}
DATA_LOOKUPS = {}   # {utterance_id: {text, speaker, dialog_id, turn_order, full_dialog_text}}
CHAT_DB_CONN = None
CURRENT_THEME = "all"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –¥–ª—è —á–∞—Ç–∞ –∏ QA ===
def init_chat_db():
    global CHAT_DB_CONN
    try:
        CHAT_DB_CONN = get_db_connection(check_same_thread=False)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ –∏ QA –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–∞—Ç–∞: {e}")
        messagebox.showerror("–û—à–∏–±–∫–∞ –ë–î", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö ===
def load_models():
    global MODEL
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ embedding-–º–æ–¥–µ–ª–∏: {config.EMBEDDING_MODEL_NAME}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å fallback –Ω–∞ CPU
    device = "cpu"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    if config.EMBEDDING_MODEL_DEVICE == "cuda":
        try:
            import torch
            if torch.cuda.is_available():
                device = "cuda"
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º CUDA")
            else:
                logger.warning("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CUDA: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
    
    try:
        MODEL = SentenceTransformer(config.EMBEDDING_MODEL_NAME, device=device)
        MODEL.max_seq_length = config.EMBEDDING_MODEL_MAX_LENGTH
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        # Fallback –Ω–∞ CPU
        try:
            MODEL = SentenceTransformer(config.EMBEDDING_MODEL_NAME, device="cpu")
            MODEL.max_seq_length = config.EMBEDDING_MODEL_MAX_LENGTH
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU (fallback)")
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e2}")
            raise e2

def load_faiss_indexes():
    global INDEXES, IDS
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ FAISS-–∏–Ω–¥–µ–∫—Å–æ–≤...")
    INDEXES = {}
    IDS = {}
    conn = sqlite3.connect(config.DATABASE_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT theme, index_path, ids_path FROM faiss_indexes")
    rows = cursor.fetchall()
    conn.close()
    
    for theme, index_path, ids_path in rows:
        if Path(index_path).exists() and Path(ids_path).exists():
            try:
                INDEXES[theme] = faiss.read_index(index_path)
                with open(ids_path, 'r', encoding='utf-8') as f:
                    IDS[theme] = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∏–Ω–¥–µ–∫—Å: {theme} ({len(IDS[theme])} —Ä–µ–ø–ª–∏–∫)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ {theme}: {e}")

def load_data_lookups():
    global DATA_LOOKUPS
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫ –∏ –¥–∏–∞–ª–æ–≥–æ–≤...")
    DATA_LOOKUPS = {}
    conn = sqlite3.connect(config.DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, dialog_id, speaker, text, turn_order FROM utterances")
    utterances = cursor.fetchall()
    
    cursor.execute("SELECT id, text FROM dialogs")
    dialog_texts = {row[0]: row[1] for row in cursor.fetchall()}
    
    for utterance_id, dialog_id, speaker, text, turn_order in utterances:
        DATA_LOOKUPS[utterance_id] = {
            "text": text,
            "speaker": speaker,
            "dialog_id": dialog_id,
            "turn_order": turn_order,
            "full_dialog_text": dialog_texts.get(dialog_id, "")
        }
    
    conn.close()
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(DATA_LOOKUPS)} —Ä–µ–ø–ª–∏–∫.")


# === –£—Ç–∏–ª–∏—Ç—ã UI ===
def set_ui_busy(is_busy: bool):
    ask_btn.config(state=tk.DISABLED if is_busy else tk.NORMAL)
    btn_send.config(state=tk.DISABLED if is_busy else tk.NORMAL)
    export_answer_btn.config(state=tk.DISABLED if is_busy else tk.NORMAL)
    export_context_btn.config(state=tk.DISABLED if is_busy else tk.NORMAL)
    btn_run_pipeline.config(state=tk.DISABLED if is_busy else tk.NORMAL)
    btn_run_indexer.config(state=tk.DISABLED if is_busy else tk.NORMAL)
    btn_reload_indexes.config(state=tk.DISABLED if is_busy else tk.NORMAL)


# === –§–æ–Ω–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: pipeline / indexer / reload ===
def run_pipeline_background():
    def worker():
        try:
            set_ui_busy(True)
            status_label.config(text="üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (pipeline)...")
            root.update_idletasks()
            init_db.init_db()
            pipeline.process_thematic_folders()
            status_label.config(text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ pipeline: {e}")
            messagebox.showerror("Pipeline", f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        finally:
            set_ui_busy(False)
    threading.Thread(target=worker, daemon=True).start()


def run_indexer_background():
    def worker():
        try:
            set_ui_busy(True)
            status_label.config(text="üîß –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤...")
            root.update_idletasks()
            init_db.init_db()
            indexer.main()
            status_label.config(text="‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∏–Ω–¥–µ–∫—Å—ã...")
            load_faiss_indexes()
            load_data_lookups()
            themes_for_combo = ["all"] + [t for t in INDEXES.keys() if t != "all"]
            theme_menu['values'] = themes_for_combo
            if themes_for_combo:
                theme_var.set(themes_for_combo[0])
            status_label.config(text="‚úÖ –ò–Ω–¥–µ–∫—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
            messagebox.showerror("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è", f"–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        finally:
            set_ui_busy(False)
    threading.Thread(target=worker, daemon=True).start()


def reload_indexes_and_data():
    try:
        set_ui_busy(True)
        status_label.config(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö...")
        root.update_idletasks()
        load_faiss_indexes()
        load_data_lookups()
        themes_for_combo = ["all"] + [t for t in INDEXES.keys() if t != "all"]
        theme_menu['values'] = themes_for_combo
        if themes_for_combo:
            theme_var.set(themes_for_combo[0])
        status_label.config(text="‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤/–¥–∞–Ω–Ω—ã—Ö: {e}")
        messagebox.showerror("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    finally:
        set_ui_busy(False)

# === HyDE ===
def generate_hypothetical_answer(query):
    try:
        hyde_prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤ call-—Ü–µ–Ω—Ç—Ä–∞.
–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Ç–æ—á–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã —É–∂–µ –Ω–∞—à—ë–ª –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∏–∞–ª–æ–≥–æ–≤.

–í–æ–ø—Ä–æ—Å: {query}

–ì–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç:"""
        
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={
                "model": config.LLM_MODEL_NAME,
                "prompt": hyde_prompt,
                "stream": False,
                "options": {"temperature": 0.1}
            },
            timeout=30
        )
        if response.status_code == 200:
            result = response.json()
            return result.get("response", "").strip()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ HyDE: {e}")
    return query

# === Reranker ===
def rerank_results(query, candidates):
    if not RERANKER_AVAILABLE or not candidates:
        return candidates
    try:
        pairs = [(query, cand["text"]) for cand in candidates]
        scores = reranker.predict(pairs)
        for i, score in enumerate(scores):
            candidates[i]["rerank_score"] = float(score)
        candidates.sort(key=lambda x: x["rerank_score"], reverse=True)
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ reranker: {e}")
    return candidates

# === –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–ø–ª–∏–∫–∞–º ===
def find_similar_utterances(query, theme="all", top_k=5):
    if theme not in INDEXES:
        logger.error(f"–ò–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–º—ã '{theme}' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return []
    
    # ‚úÖ –ü—Ä–æ—Å—Ç–æ –∫–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å ‚Äî –±–µ–∑ HyDE
    query_vector = MODEL.encode([query], convert_to_tensor=False)[0].astype('float32')
    
    index = INDEXES[theme]
    ids_list = IDS[theme]
    distances, indices = index.search(np.array([query_vector]), top_k)
    
    candidates = []
    for i, idx in enumerate(indices[0]):
        if idx >= len(ids_list): continue
        utterance_id = ids_list[idx]
        if utterance_id not in DATA_LOOKUPS: continue
        item = DATA_LOOKUPS[utterance_id].copy()
        item["id"] = utterance_id
        item["faiss_score"] = float(distances[0][i])
        candidates.append(item)
    
    # ‚úÖ –ë–µ–∑ reranker
    return candidates

# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ä–µ–ø–ª–∏–∫–∞–º–∏ ===
def format_context_for_llm(results):
    context_parts = []
    for item in results:
        dialog_id = item["dialog_id"]
        turn_order = item["turn_order"]
        full_text = item["full_dialog_text"]
        
        surrounding_lines = []
        dialog_lines = full_text.splitlines()
        target_line = f"{item['speaker']}: {item['text']}"
        
        for i, line in enumerate(dialog_lines):
            if line == target_line or (line.startswith(item['speaker'] + ":") and item['text'] in line):
                start = max(0, i - 2)
                end = min(len(dialog_lines), i + 3)
                surrounding_lines = dialog_lines[start:end]
                break
        
        context_parts.append(
            f"[–°—Ö–æ–∂–µ—Å—Ç—å: {item.get('rerank_score', item['faiss_score']):.3f}] ID: {item['id']}\n" +
            "\n".join(surrounding_lines) +
            "\n---"
        )
    return "\n\n".join(context_parts)

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ QA-–ø–∞—Ä—ã ===
def save_qa_pair(question, theme, method, params, answer, context_summary):
    try:
        cursor = CHAT_DB_CONN.cursor()
        cursor.execute("""
            INSERT INTO qa_pairs (timestamp, question, theme, method_used, parameters, answer, context_summary)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            datetime.now().isoformat(),
            question,
            theme,
            method,
            json.dumps(params, ensure_ascii=False),
            answer,
            json.dumps(context_summary, ensure_ascii=False) if isinstance(context_summary, (list, dict)) else str(context_summary)
        ))
        CHAT_DB_CONN.commit()
        logger.info("‚úÖ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QA-–ø–∞—Ä—ã: {e}")

# === –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ analysis_methods.py ===
def run_ask():
    question = entry.get().strip()
    if not question:
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!")
        return

    theme = theme_var.get()
    top_k = int(top_k_var.get())
    chunk_size = int(chunk_size_var.get())
    selected_method_name = method_var.get()

    ask_btn.config(state=tk.DISABLED, text="–ò—â—É...")
    status_label.config(text=f"üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫ (—Ç–µ–º–∞: {theme})...")
    root.update_idletasks()

    def update_status(text):
        status_label.config(text=text)
        root.update_idletasks()

    def worker():
        try:
            results = find_similar_utterances(question, theme=theme, top_k=top_k)
            if not results:
                answer_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã."
                context_text = "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–ø–ª–∏–∫."
            else:
                import analysis_methods
                analysis_func = analysis_methods.get_analysis_method(selected_method_name)
                if not analysis_func:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {selected_method_name}")

                context_text = format_context_for_llm(results)
                answer_text = analysis_func(
                    question=question,
                    found_with_scores=[(r, r.get("rerank_score", r["faiss_score"])) for r in results],
                    chunk_size=chunk_size,
                    status_callback=update_status
                )
                
                save_qa_pair(
                    question=question,
                    theme=theme,
                    method=selected_method_name,
                    params={"top_k": top_k, "chunk_size": chunk_size},
                    answer=answer_text,
                    context_summary=[r["id"] for r in results]
                )

            text_answer.delete(1.0, tk.END)
            text_answer.insert(tk.END, answer_text)
            text_context.delete(1.0, tk.END)
            text_context.insert(tk.END, context_text)
            status_label.config(text=f"‚úÖ –ì–æ—Ç–æ–≤. –¢–µ–º–∞: {theme}. –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ø–ª–∏–∫.")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {e}"
            logger.error(error_msg)
            text_answer.delete(1.0, tk.END)
            text_answer.insert(tk.END, error_msg)
            status_label.config(text=f"‚ùå {error_msg}")
        finally:
            ask_btn.config(state=tk.NORMAL, text="–°–ø—Ä–æ—Å–∏—Ç—å")

    thread = threading.Thread(target=worker)
    thread.daemon = True
    thread.start()

# === –≠–∫—Å–ø–æ—Ä—Ç ===
def export_text(widget, default_name):
    content = widget.get(1.0, tk.END)
    if not content.strip():
        messagebox.showwarning("–≠–∫—Å–ø–æ—Ä—Ç", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    file_path = filedialog.asksaveasfilename(
        defaultextension=".txt",
        initialfile=default_name,
        filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
    )
    if file_path:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:\n{file_path}")

def export_answer():
    export_text(text_answer, f"–û—Ç–≤–µ—Ç_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

def export_context():
    export_text(text_context, f"–ö–æ–Ω—Ç–µ–∫—Å—Ç_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")

# === –ß–∞—Ç —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º ===
def on_send_click():
    user_message = entry_chat.get().strip()
    if not user_message: return
    chat_history.insert(tk.END, f"–í—ã: {user_message}\n")
    chat_history.see(tk.END)
    entry_chat.delete(0, tk.END)
    threading.Thread(target=process_user_message, args=(user_message,), daemon=True).start()

def process_user_message(user_message):
    try:
        if user_message.lower().startswith(("–Ω–∞–π—Ç–∏", "–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏", "search")):
            prompt = f"–ó–∞–¥–∞–π 1-2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{user_message}'"
        else:
            prompt = f"–û—Ç–≤–µ—Ç—å –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫ call-—Ü–µ–Ω—Ç—Ä–∞: {user_message}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
        try:
            test_response = requests.get('http://localhost:11434/api/tags', timeout=5)
            if test_response.status_code != 200:
                chat_history.insert(tk.END, f"–ê–Ω–∞–ª–∏—Ç–∏–∫: Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {test_response.status_code})\n")
                return
        except requests.exceptions.RequestException:
            chat_history.insert(tk.END, f"–ê–Ω–∞–ª–∏—Ç–∏–∫: Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ollama serve\n")
            return
        
        response = requests.post(
            'http://localhost:11434/api/generate',
            json={"model": config.LLM_MODEL_NAME, "prompt": prompt, "stream": False},
            timeout=30
        )
        if response.status_code == 200:
            answer = response.json().get("response", "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏").strip()
            chat_history.insert(tk.END, f"–ê–Ω–∞–ª–∏—Ç–∏–∫: {answer}\n")
        else:
            chat_history.insert(tk.END, f"–ê–Ω–∞–ª–∏—Ç–∏–∫: –û—à–∏–±–∫–∞ LLM ({response.status_code})\n")
    except Exception as e:
        chat_history.insert(tk.END, f"–ê–Ω–∞–ª–∏—Ç–∏–∫: –û—à–∏–±–∫–∞: {e}\n")
    chat_history.see(tk.END)

# === GUI ===
def create_gui():
    global root, status_label, ask_btn, btn_send, entry, text_answer, text_context
    global top_k_var, chunk_size_var, method_var, theme_var, entry_chat, chat_history, theme_menu
    global export_answer_btn, export_context_btn

    root = tk.Tk()
    root.title("CallCenter AI –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä v3 (—Ä–µ–ø–ª–∏–∫–∏ + HyDE + Reranker)")
    root.geometry("1350x900")

    # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
    theme_colors = config.GUI_THEME
    dark_bg = theme_colors["dark_bg"]
    dark_fg = theme_colors["dark_fg"]
    dark_entry_bg = theme_colors["dark_entry_bg"]
    dark_button_bg = theme_colors["dark_button_bg"]
    dark_frame_bg = theme_colors["dark_frame_bg"]
    success_color = theme_colors["success_color"]

    root.configure(bg=dark_bg)
    style = ttk.Style()
    style.theme_use('clam')
    style.configure("TFrame", background=dark_frame_bg)
    style.configure("TLabel", background=dark_bg, foreground=dark_fg)
    style.configure("TButton", background=dark_button_bg, foreground=dark_fg)
    style.configure("TCombobox", fieldbackground=dark_entry_bg, background=dark_button_bg, foreground=dark_fg)
    style.configure("TNotebook", background=dark_bg)
    style.configure("TNotebook.Tab", background=dark_button_bg, foreground=dark_fg)
    style.map("TNotebook.Tab", background=[('selected', dark_bg)], foreground=[('selected', dark_fg)])

    # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
    frame_top = tk.Frame(root, bg=dark_frame_bg)
    frame_top.pack(pady=10, padx=10, fill=tk.X)

    tk.Label(frame_top, text="–í–∞—à –≤–æ–ø—Ä–æ—Å:", bg=dark_frame_bg, fg=dark_fg, font=('Arial', 10, 'bold')).pack(anchor=tk.W)
    entry = tk.Entry(frame_top, width=70, font=('Arial', 10), bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))

    settings_frame = tk.Frame(frame_top, bg=dark_frame_bg)
    settings_frame.pack(side=tk.LEFT, padx=(10, 5))

    tk.Label(settings_frame, text="–¢–µ–º–∞:", bg=dark_frame_bg, fg=dark_fg).pack(side=tk.LEFT)
    theme_var = tk.StringVar(value="–ó–∞–≥—Ä—É–∑–∫–∞...")
    theme_menu = ttk.Combobox(settings_frame, textvariable=theme_var, values=["–ó–∞–≥—Ä—É–∑–∫–∞..."], state="readonly", width=15)
    theme_menu.pack(side=tk.LEFT, padx=2)

    tk.Label(settings_frame, text="–ú–µ—Ç–æ–¥:", bg=dark_frame_bg, fg=dark_fg).pack(side=tk.LEFT)
    method_var = tk.StringVar(value=config.GUI_DEFAULT_METHOD)
    method_menu = ttk.Combobox(settings_frame, textvariable=method_var, values=config.ANALYSIS_METHODS, state="readonly", width=12)
    method_menu.pack(side=tk.LEFT, padx=2)

    tk.Label(settings_frame, text="–ù–∞–π—Ç–∏:", bg=dark_frame_bg, fg=dark_fg).pack(side=tk.LEFT)
    top_k_var = tk.StringVar(value=str(config.GUI_DEFAULT_TOP_K))
    top_k_spinbox = tk.Spinbox(settings_frame, from_=1, to=10000, textvariable=top_k_var, width=6, bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    top_k_spinbox.pack(side=tk.LEFT, padx=2)

    tk.Label(settings_frame, text="—Ä–µ–ø–ª–∏–∫, –ø–æ", bg=dark_frame_bg, fg=dark_fg).pack(side=tk.LEFT)
    chunk_size_var = tk.StringVar(value=str(config.GUI_DEFAULT_CHUNK_SIZE))
    chunk_size_spinbox = tk.Spinbox(settings_frame, from_=1, to=1000, textvariable=chunk_size_var, width=4, bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    chunk_size_spinbox.pack(side=tk.LEFT, padx=2)

    tk.Label(settings_frame, text="—à—Ç.", bg=dark_frame_bg, fg=dark_fg).pack(side=tk.LEFT)

    ask_btn = tk.Button(frame_top, text="–°–ø—Ä–æ—Å–∏—Ç—å", command=run_ask, state=tk.DISABLED, bg=success_color, fg='white')
    ask_btn.pack(side=tk.RIGHT)

    export_frame = tk.Frame(frame_top, bg=dark_frame_bg)
    export_frame.pack(side=tk.RIGHT, padx=(0, 10))
    export_answer_btn = tk.Button(export_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –û—Ç–≤–µ—Ç–∞", command=export_answer, state=tk.DISABLED, bg=dark_button_bg, fg=dark_fg)
    export_answer_btn.pack(side=tk.LEFT, padx=2)
    export_context_btn = tk.Button(export_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –ö–æ–Ω—Ç–µ–∫—Å—Ç–∞", command=export_context, state=tk.DISABLED, bg=dark_button_bg, fg=dark_fg)
    export_context_btn.pack(side=tk.LEFT, padx=2)

    status_label = tk.Label(root, text="‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...", bd=1, relief=tk.SUNKEN, anchor=tk.W, bg=dark_entry_bg, fg=dark_fg)
    status_label.pack(side=tk.BOTTOM, fill=tk.X)

    # –ü–∞–Ω–µ–ª—å –¥–∞–Ω–Ω—ã—Ö/—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    controls_frame = tk.Frame(root, bg=dark_frame_bg)
    controls_frame.pack(pady=(0, 5), padx=10, fill=tk.X)
    global btn_run_pipeline, btn_run_indexer, btn_reload_indexes
    btn_run_pipeline = tk.Button(controls_frame, text="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ (.rtf)", command=run_pipeline_background, bg=dark_button_bg, fg=dark_fg)
    btn_run_pipeline.pack(side=tk.LEFT, padx=2)
    btn_run_indexer = tk.Button(controls_frame, text="–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å (FAISS)", command=run_indexer_background, bg=dark_button_bg, fg=dark_fg)
    btn_run_indexer.pack(side=tk.LEFT, padx=2)
    btn_reload_indexes = tk.Button(controls_frame, text="–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã/–¥–∞–Ω–Ω—ã–µ", command=reload_indexes_and_data, bg=dark_button_bg, fg=dark_fg)
    btn_reload_indexes.pack(side=tk.LEFT, padx=2)

    # –í–∫–ª–∞–¥–∫–∏
    notebook = ttk.Notebook(root)
    notebook.pack(pady=10, padx=10, expand=True, fill=tk.BOTH)

    tab_answer = ttk.Frame(notebook)
    notebook.add(tab_answer, text='–û—Ç–≤–µ—Ç')
    text_answer = scrolledtext.ScrolledText(tab_answer, wrap=tk.WORD, font=('Arial', 10), bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    text_answer.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)

    tab_context = ttk.Frame(notebook)
    notebook.add(tab_context, text='–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ø–ª–∏–∫–∏')
    text_context = scrolledtext.ScrolledText(tab_context, wrap=tk.WORD, font=('Arial', 10), bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    text_context.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)

    tab_chat = ttk.Frame(notebook)
    notebook.add(tab_chat, text='–ß–∞—Ç —Å –ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º')
    chat_frame = tk.Frame(tab_chat, bg=dark_frame_bg)
    chat_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
    chat_history = scrolledtext.ScrolledText(chat_frame, wrap=tk.WORD, font=('Arial', 10), bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    chat_history.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    input_frame = tk.Frame(chat_frame, bg=dark_frame_bg)
    input_frame.pack(fill=tk.X, padx=5, pady=5)
    entry_chat = tk.Entry(input_frame, font=('Arial', 10), bg=dark_entry_bg, fg=dark_fg, insertbackground=dark_fg)
    entry_chat.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
    btn_send = tk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=on_send_click, state=tk.DISABLED, bg=dark_button_bg, fg=dark_fg)
    btn_send.pack(side=tk.RIGHT)

    # –ó–∞–≥—Ä—É–∑–∫–∞
    def delayed_init():
        init_chat_db()
        init_db.init_db()
        load_models()
        load_faiss_indexes()
        load_data_lookups()
        themes_for_combo = ["all"] + [t for t in INDEXES.keys() if t != "all"]
        theme_menu['values'] = themes_for_combo
        if themes_for_combo:
            theme_var.set(themes_for_combo[0])
        ask_btn.config(state=tk.NORMAL)
        btn_send.config(state=tk.NORMAL)
        export_answer_btn.config(state=tk.NORMAL)
        export_context_btn.config(state=tk.NORMAL)
        status_label.config(text="‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        if not INDEXES:
            if messagebox.askyesno("–ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã FAISS. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–π—á–∞—Å?"):
                run_indexer_background()

    root.after(100, delayed_init)
    root.mainloop()

if __name__ == "__main__":
    create_gui()