"""–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞ CallCenter AI v3."""

import sys
import os
import time
import json
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class SystemTester:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞."""
    
    def __init__(self):
        self.results = {}
        self.test_data = {}
        
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞."""
        print(f"\n{'='*60}")
        print(f"üß™ {title}")
        print(f"{'='*60}")
        
    def print_result(self, test_name: str, success: bool, message: str = ""):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞."""
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if message:
            print(f"    {message}")
        self.results[test_name] = success
        
    def test_basic_imports(self) -> bool:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤."""
        self.print_header("–ë–ê–ó–û–í–´–ï –ò–ú–ü–û–†–¢–´")
        
        try:
            import sqlite3
            self.print_result("sqlite3", True)
        except ImportError as e:
            self.print_result("sqlite3", False, str(e))
            return False
            
        try:
            import tkinter
            self.print_result("tkinter", True)
        except ImportError as e:
            self.print_result("tkinter", False, str(e))
            
        try:
            import numpy
            self.print_result("numpy", True)
        except ImportError as e:
            self.print_result("numpy", False, str(e))
            
        try:
            import faiss
            self.print_result("faiss", True)
        except ImportError as e:
            self.print_result("faiss", False, str(e))
            
        try:
            import requests
            self.print_result("requests", True)
        except ImportError as e:
            self.print_result("requests", False, str(e))
            
        return True
        
    def test_config(self) -> bool:
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.print_header("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
        
        try:
            import config
            self.print_result("config.py", True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            required_attrs = [
                'DATABASE_PATH', 'EMBEDDING_MODEL_NAME', 'EMBEDDING_MODEL_DEVICE',
                'LLM_MODEL_NAME', 'LLM_API_URL', 'ANALYSIS_METHODS'
            ]
            
            for attr in required_attrs:
                if hasattr(config, attr):
                    self.print_result(f"config.{attr}", True)
                else:
                    self.print_result(f"config.{attr}", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
            return True
            
        except Exception as e:
            self.print_result("config.py", False, str(e))
            return False
            
    def test_database(self) -> bool:
        """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.print_header("–ë–ê–ó–ê –î–ê–ù–ù–´–•")
        
        try:
            import config
            from utils import get_db_connection
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            conn = get_db_connection()
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = ['dialogs', 'utterances', 'utterance_embeddings', 'faiss_indexes']
            for table in required_tables:
                if table in tables:
                    self.print_result(f"–¢–∞–±–ª–∏—Ü–∞ {table}", True)
                else:
                    self.print_result(f"–¢–∞–±–ª–∏—Ü–∞ {table}", False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.execute("SELECT COUNT(*) FROM utterances")
            utterance_count = cursor.fetchone()[0]
            self.print_result(f"–†–µ–ø–ª–∏–∫ –≤ –ë–î", True, f"{utterance_count} –∑–∞–ø–∏—Å–µ–π")
            
            cursor.execute("SELECT COUNT(*) FROM dialogs")
            dialog_count = cursor.fetchone()[0]
            self.print_result(f"–î–∏–∞–ª–æ–≥–æ–≤ –≤ –ë–î", True, f"{dialog_count} –∑–∞–ø–∏—Å–µ–π")
            
            conn.close()
            return True
            
        except Exception as e:
            self.print_result("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", False, str(e))
            return False
            
    def test_faiss_indexes(self) -> bool:
        """–¢–µ—Å—Ç FAISS –∏–Ω–¥–µ–∫—Å–æ–≤."""
        self.print_header("FAISS –ò–ù–î–ï–ö–°–´")
        
        try:
            import faiss
            import json
            from pathlib import Path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–Ω–¥–µ–∫—Å–æ–≤
            faiss_dir = Path("faiss_index")
            if not faiss_dir.exists():
                self.print_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è faiss_index", False, "–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False
                
            self.print_result("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è faiss_index", True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            index_files = list(faiss_dir.glob("*.index"))
            if not index_files:
                self.print_result("–§–∞–π–ª—ã –∏–Ω–¥–µ–∫—Å–æ–≤", False, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
            self.print_result("–§–∞–π–ª—ã –∏–Ω–¥–µ–∫—Å–æ–≤", True, f"{len(index_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID —Ñ–∞–π–ª—ã
            id_files = list(faiss_dir.glob("ids_*.json"))
            self.print_result("ID —Ñ–∞–π–ª—ã", True, f"{len(id_files)} —Ñ–∞–π–ª–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                index = faiss.read_index(str(index_files[0]))
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞", True, f"–†–∞–∑–º–µ—Ä: {index.ntotal}")
            except Exception as e:
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞", False, str(e))
                
            return True
            
        except Exception as e:
            self.print_result("FAISS –∏–Ω–¥–µ–∫—Å—ã", False, str(e))
            return False
            
    def test_analysis_methods(self) -> bool:
        """–¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∞–Ω–∞–ª–∏–∑–∞."""
        self.print_header("–ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê")
        
        try:
            import analysis_methods
            
            methods = ["hierarchical", "rolling", "facts", "classification", "callback_classifier", "fast_phrase_classifier"]
            
            for method in methods:
                func = analysis_methods.get_analysis_method(method)
                if func:
                    self.print_result(f"–ú–µ—Ç–æ–¥ {method}", True)
                else:
                    self.print_result(f"–ú–µ—Ç–æ–¥ {method}", False, "–ù–µ –Ω–∞–π–¥–µ–Ω")
                    
            return True
            
        except Exception as e:
            self.print_result("–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞", False, str(e))
            return False
            
    def test_gui_components(self) -> bool:
        """–¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ GUI."""
        self.print_header("–ö–û–ú–ü–û–ù–ï–ù–¢–´ GUI")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç GUI –º–æ–¥—É–ª–µ–π
            import gui
            self.print_result("gui.py –∏–º–ø–æ—Ä—Ç", True)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ GUI
            from gui import load_faiss_indexes, load_data_lookups
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            try:
                load_faiss_indexes()
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤", True)
            except Exception as e:
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤", False, str(e))
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                load_data_lookups()
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", True)
            except Exception as e:
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", False, str(e))
                
            return True
            
        except Exception as e:
            self.print_result("GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", False, str(e))
            return False
            
    def test_model_loading(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."""
        self.print_header("–ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò")
        
        try:
            import torch
            import config
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
            cuda_available = torch.cuda.is_available()
            self.print_result("CUDA –¥–æ—Å—Ç—É–ø–Ω–∞", cuda_available)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            device = config.EMBEDDING_MODEL_DEVICE
            self.print_result(f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ", True, device)
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏—Ç—Å—è)
            response = input("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è? (y/n): ").lower().strip()
            if response == 'y':
                try:
                    from sentence_transformers import SentenceTransformer
                    model = SentenceTransformer(config.EMBEDDING_MODEL_NAME, device="cpu")
                    self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", True, "–£—Å–ø–µ—à–Ω–æ")
                except Exception as e:
                    self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", False, str(e))
            else:
                self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", True, "–ü—Ä–æ–ø—É—â–µ–Ω–æ")
                
            return True
            
        except Exception as e:
            self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", False, str(e))
            return False
            
    def test_api_connectivity(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API."""
        self.print_header("API –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
        
        try:
            import requests
            import config
            
            # –¢–µ—Å—Ç Ollama
            try:
                response = requests.get('http://localhost:11434/api/tags', timeout=5)
                if response.status_code == 200:
                    self.print_result("Ollama API", True, "–î–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    self.print_result("Ollama API", False, f"–ö–æ–¥ {response.status_code}")
            except Exception as e:
                self.print_result("Ollama API", False, "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
            # –¢–µ—Å—Ç OpenRouter (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if config.OPENROUTER_API_KEY:
                try:
                    headers = {"Authorization": f"Bearer {config.OPENROUTER_API_KEY}"}
                    response = requests.get("https://openrouter.ai/api/v1/models", headers=headers, timeout=10)
                    if response.status_code == 200:
                        self.print_result("OpenRouter API", True, "–î–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        self.print_result("OpenRouter API", False, f"–ö–æ–¥ {response.status_code}")
                except Exception as e:
                    self.print_result("OpenRouter API", False, "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                self.print_result("OpenRouter API", True, "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                
            return True
            
        except Exception as e:
            self.print_result("API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", False, str(e))
            return False
            
    def run_quick_test(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
        self.print_header("–ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
        
        tests = [
            ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", self.test_basic_imports),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_config),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_database),
            ("FAISS –∏–Ω–¥–µ–∫—Å—ã", self.test_faiss_indexes),
            ("–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞", self.test_analysis_methods),
            ("GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", self.test_gui_components),
        ]
        
        for test_name, test_func in tests:
            try:
                test_func()
            except Exception as e:
                self.print_result(test_name, False, f"–û—à–∏–±–∫–∞: {e}")
                
    def run_full_test(self):
        """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º."""
        self.print_header("–ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
        
        tests = [
            ("–ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã", self.test_basic_imports),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_config),
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_database),
            ("FAISS –∏–Ω–¥–µ–∫—Å—ã", self.test_faiss_indexes),
            ("–ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞", self.test_analysis_methods),
            ("GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", self.test_gui_components),
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", self.test_model_loading),
            ("API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", self.test_api_connectivity),
        ]
        
        for test_name, test_func in tests:
            try:
                test_func()
            except Exception as e:
                self.print_result(test_name, False, f"–û—à–∏–±–∫–∞: {e}")
                
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        total_tests = len(self.results)
        passed_tests = sum(1 for success in self.results.values() if success)
        failed_tests = total_tests - passed_tests
        
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed_tests/total_tests*100:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
            for test_name, success in self.results.items():
                if not success:
                    print(f"  - {test_name}")
                    
        print(f"\n{'='*60}")
        if failed_tests == 0:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã.")
        print(f"{'='*60}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß™ CallCenter AI v3 - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º")
    print("=" * 60)
    
    tester = SystemTester()
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)")
        print("2. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–≤—Å–µ —Å–∏—Å—Ç–µ–º—ã)")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            tester.run_quick_test()
            tester.print_summary()
        elif choice == "2":
            tester.run_full_test()
            tester.print_summary()
        elif choice == "3":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()
