"""–£–ª—É—á—à–µ–Ω–Ω—ã–π GUI –¥–ª—è CallCenter AI v3 —Å —Ä—É—Å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import sqlite3
import json
import threading
import time
import requests
import numpy as np
import faiss
from sentence_transformers import SentenceTransformer
from pathlib import Path
import config
from utils import get_db_connection
from analysis_methods import get_analysis_method
from data_manager import DataManager
import logging
from datetime import datetime
import pandas as pd
from tkinter import simpledialog
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("gui.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MODEL = None
FAISS_INDEXES = {}
DIALOG_LOOKUP = {}
UTTERANCE_LOOKUP = {}
CHAT_DB_CONN = None
CURRENT_THEME = "all"

class CallCenterGUI:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self, root):
        self.root = root
        self.root.title("CallCenter AI v3 - –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤")
        self.root.geometry("1400x900")
        self.root.configure(bg='#f0f0f0')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        self.progress_vars = {}
        self.status_vars = {}
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        self.data_manager = DataManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.init_chat_db()
        self.create_widgets()
        self.load_initial_data()
        
    def init_chat_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞."""
        global CHAT_DB_CONN
        try:
            CHAT_DB_CONN = get_db_connection()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_qa_pair(self, question, theme, method, params, answer, context_summary):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            cursor = CHAT_DB_CONN.cursor()
            cursor.execute("""
                INSERT INTO qa_pairs (timestamp, question, theme, method_used, parameters, answer, context_summary)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                datetime.now().isoformat(),
                question,
                theme,
                method,
                json.dumps(params, ensure_ascii=False),
                answer,
                json.dumps(context_summary, ensure_ascii=False) if isinstance(context_summary, (list, dict)) else str(context_summary)
            ))
            CHAT_DB_CONN.commit()
            logger.info("‚úÖ –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QA-–ø–∞—Ä—ã: {e}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.create_data_processing_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑
        self.create_search_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        self.create_data_management_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –ß–∞—Ç —Å –ò–ò
        self.create_chat_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.create_statistics_tab()
        
    def create_data_processing_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
        self.data_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.data_frame, text="üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.data_frame, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.create_processing_controls()
        self.create_progress_section()
        self.create_log_section()
        
    def create_processing_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        controls_frame = ttk.LabelFrame(self.data_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        buttons_frame = tk.Frame(controls_frame)
        buttons_frame.pack(fill='x')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ RTF —Ñ–∞–π–ª–æ–≤
        self.process_rtf_btn = tk.Button(buttons_frame, text="üìÅ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å RTF —Ñ–∞–π–ª—ã", 
                                        command=self.process_rtf_files, 
                                        bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                        width=20, height=2)
        self.process_rtf_btn.pack(side='left', padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.create_embeddings_btn = tk.Button(buttons_frame, text="üß† –°–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏", 
                                              command=self.create_embeddings, 
                                              bg='#2196F3', fg='white', font=('Arial', 10, 'bold'),
                                              width=20, height=2)
        self.create_embeddings_btn.pack(side='left', padx=5, pady=5)
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        self.build_indexes_btn = tk.Button(buttons_frame, text="üîç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã", 
                                          command=self.build_indexes, 
                                          bg='#FF9800', fg='white', font=('Arial', 10, 'bold'),
                                          width=20, height=2)
        self.build_indexes_btn.pack(side='left', padx=5, pady=5)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—Ä–∞–∑
        self.classify_phrases_btn = tk.Button(buttons_frame, text="üìù –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã", 
                                             command=self.classify_phrases, 
                                             bg='#9C27B0', fg='white', font=('Arial', 10, 'bold'),
                                             width=20, height=2)
        self.classify_phrases_btn.pack(side='left', padx=5, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(controls_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ", padding=10)
        info_frame.pack(fill='x', pady=10)
        
        self.info_text = scrolledtext.ScrolledText(info_frame, height=8, width=80)
        self.info_text.pack(fill='both', expand=True)
        
    def create_progress_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤."""
        progress_frame = ttk.LabelFrame(self.data_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        progress_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.overall_progress_var = tk.DoubleVar()
        self.overall_progress = ttk.Progressbar(progress_frame, variable=self.overall_progress_var, 
                                               maximum=100, length=400)
        self.overall_progress.pack(fill='x', pady=5)
        
        self.overall_status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.overall_status_label = tk.Label(progress_frame, textvariable=self.overall_status_var, 
                                           font=('Arial', 10))
        self.overall_status_label.pack(pady=2)
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        details_frame = tk.Frame(progress_frame)
        details_frame.pack(fill='x', pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        tk.Label(details_frame, text="–î–∏–∞–ª–æ–≥–∏:", font=('Arial', 9)).grid(row=0, column=0, sticky='w')
        self.dialogs_progress_var = tk.DoubleVar()
        self.dialogs_progress = ttk.Progressbar(details_frame, variable=self.dialogs_progress_var, 
                                               maximum=100, length=200)
        self.dialogs_progress.grid(row=0, column=1, padx=5)
        self.dialogs_status_var = tk.StringVar(value="0/0")
        tk.Label(details_frame, textvariable=self.dialogs_status_var, font=('Arial', 9)).grid(row=0, column=2)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        tk.Label(details_frame, text="–≠–º–±–µ–¥–¥–∏–Ω–≥–∏:", font=('Arial', 9)).grid(row=1, column=0, sticky='w')
        self.embeddings_progress_var = tk.DoubleVar()
        self.embeddings_progress = ttk.Progressbar(details_frame, variable=self.embeddings_progress_var, 
                                                  maximum=100, length=200)
        self.embeddings_progress.grid(row=1, column=1, padx=5)
        self.embeddings_status_var = tk.StringVar(value="0/0")
        tk.Label(details_frame, textvariable=self.embeddings_status_var, font=('Arial', 9)).grid(row=1, column=2)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        tk.Label(details_frame, text="–ò–Ω–¥–µ–∫—Å—ã:", font=('Arial', 9)).grid(row=2, column=0, sticky='w')
        self.indexes_progress_var = tk.DoubleVar()
        self.indexes_progress = ttk.Progressbar(details_frame, variable=self.indexes_progress_var, 
                                               maximum=100, length=200)
        self.indexes_progress.grid(row=2, column=1, padx=5)
        self.indexes_status_var = tk.StringVar(value="0/0")
        tk.Label(details_frame, textvariable=self.indexes_status_var, font=('Arial', 9)).grid(row=2, column=2)
        
    def create_log_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ª–æ–≥–æ–≤."""
        log_frame = ttk.LabelFrame(self.data_frame, text="–õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=10)
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=10, width=80)
        self.log_text.pack(fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_buttons_frame = tk.Frame(log_frame)
        log_buttons_frame.pack(fill='x', pady=5)
        
        tk.Button(log_buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_logs).pack(side='left', padx=5)
        tk.Button(log_buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏", command=self.save_logs).pack(side='left', padx=5)
        
    def create_search_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞."""
        self.search_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.search_frame, text="üîç –ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.search_frame, text="–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.create_search_controls()
        self.create_results_section()
        
    def create_search_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º."""
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_frame = ttk.LabelFrame(self.search_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", padding=10)
        search_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        search_input_frame = tk.Frame(search_frame)
        search_input_frame.pack(fill='x', pady=5)
        
        tk.Label(search_input_frame, text="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", font=('Arial', 10, 'bold')).pack(anchor='w')
        self.search_entry = tk.Entry(search_input_frame, font=('Arial', 12), width=60)
        self.search_entry.pack(fill='x', pady=2)
        self.search_entry.bind('<Return>', lambda e: self.perform_search())
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
        params_frame = tk.Frame(search_frame)
        params_frame.pack(fill='x', pady=5)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        tk.Label(params_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:").grid(row=0, column=0, sticky='w', padx=5)
        self.results_count_var = tk.StringVar(value="10")
        results_spinbox = tk.Spinbox(params_frame, from_=1, to=100, textvariable=self.results_count_var, width=10)
        results_spinbox.grid(row=0, column=1, padx=5)
        
        # –¢–µ–º–∞ –ø–æ–∏—Å–∫–∞
        tk.Label(params_frame, text="–¢–µ–º–∞:").grid(row=0, column=2, sticky='w', padx=5)
        self.theme_var = tk.StringVar(value="all")
        theme_combo = ttk.Combobox(params_frame, textvariable=self.theme_var, width=15)
        theme_combo['values'] = ['all', 'CallBack', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ_–¥–æ–≥–æ–≤–æ—Ä–∞']
        theme_combo.grid(row=0, column=3, padx=5)
        
        # –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        tk.Label(params_frame, text="–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:").grid(row=1, column=0, sticky='w', padx=5)
        self.analysis_method_var = tk.StringVar(value="hierarchical")
        method_combo = ttk.Combobox(params_frame, textvariable=self.analysis_method_var, width=15)
        method_combo['values'] = ['hierarchical', 'rolling', 'facts', 'classification', 'callback_classifier', 'fast_phrase_classifier']
        method_combo.grid(row=1, column=1, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        search_buttons_frame = tk.Frame(search_frame)
        search_buttons_frame.pack(fill='x', pady=10)
        
        self.search_btn = tk.Button(search_buttons_frame, text="üîç –ù–∞–π—Ç–∏", 
                                   command=self.perform_search, 
                                   bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                   width=15, height=2)
        self.search_btn.pack(side='left', padx=5)
        
        self.analyze_btn = tk.Button(search_buttons_frame, text="üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", 
                                    command=self.perform_analysis, 
                                    bg='#2196F3', fg='white', font=('Arial', 10, 'bold'),
                                    width=15, height=2)
        self.analyze_btn.pack(side='left', padx=5)
        
        self.clear_results_btn = tk.Button(search_buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                                          command=self.clear_results, 
                                          bg='#f44336', fg='white', font=('Arial', 10, 'bold'),
                                          width=15, height=2)
        self.clear_results_btn.pack(side='left', padx=5)
        
    def create_results_section(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        results_frame = ttk.LabelFrame(self.search_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞", padding=10)
        results_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        columns = ('ID', '–¢–µ–∫—Å—Ç', '–°–ø–∏–∫–µ—Ä', '–î–∏–∞–ª–æ–≥', '–û—Ü–µ–Ω–∫–∞')
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.results_tree.heading(col, text=col)
            self.results_tree.column(col, width=150)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(results_frame, orient='vertical', command=self.results_tree.yview)
        h_scrollbar = ttk.Scrollbar(results_frame, orient='horizontal', command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.results_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        results_frame.grid_rowconfigure(0, weight=1)
        results_frame.grid_columnconfigure(0, weight=1)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self.results_tree.bind('<Double-1>', self.on_result_double_click)
        
    def create_data_management_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
        self.data_mgmt_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.data_mgmt_frame, text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.data_mgmt_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
        self.create_data_controls()
        self.create_data_tables()
        
    def create_data_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏."""
        controls_frame = ttk.LabelFrame(self.data_mgmt_frame, text="–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(controls_frame)
        buttons_frame.pack(fill='x')
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        self.view_phrases_btn = tk.Button(buttons_frame, text="üìù –§—Ä–∞–∑—ã –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤", 
                                         command=self.view_callback_phrases, 
                                         bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                         width=20, height=2)
        self.view_phrases_btn.pack(side='left', padx=5, pady=5)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤
        self.view_dialogs_btn = tk.Button(buttons_frame, text="üí¨ –î–∏–∞–ª–æ–≥–∏", 
                                         command=self.view_dialogs, 
                                         bg='#2196F3', fg='white', font=('Arial', 10, 'bold'),
                                         width=20, height=2)
        self.view_dialogs_btn.pack(side='left', padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
        self.create_dict_btn = tk.Button(buttons_frame, text="üìö –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å", 
                                        command=self.create_hierarchical_dictionary, 
                                        bg='#FF9800', fg='white', font=('Arial', 10, 'bold'),
                                        width=20, height=2)
        self.create_dict_btn.pack(side='left', padx=5, pady=5)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ø–ª–∏–∫
        self.view_utterances_btn = tk.Button(buttons_frame, text="üó£Ô∏è –†–µ–ø–ª–∏–∫–∏", 
                                            command=self.view_utterances, 
                                            bg='#FF9800', fg='white', font=('Arial', 10, 'bold'),
                                            width=20, height=2)
        self.view_utterances_btn.pack(side='left', padx=5, pady=5)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        self.export_btn = tk.Button(buttons_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                                   command=self.export_data, 
                                   bg='#9C27B0', fg='white', font=('Arial', 10, 'bold'),
                                   width=20, height=2)
        self.export_btn.pack(side='left', padx=5, pady=5)
        
    def create_data_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        tables_frame = ttk.LabelFrame(self.data_mgmt_frame, text="–¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö", padding=10)
        tables_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        columns = ('ID', '–¢–µ–∫—Å—Ç', '–ò—Å—Ç–æ—á–Ω–∏–∫', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ß–∞—Å—Ç–æ—Ç–∞', '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ')
        self.data_tree = ttk.Treeview(tables_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in columns:
            self.data_tree.heading(col, text=col)
            self.data_tree.column(col, width=120)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(tables_frame, orient='vertical', command=self.data_tree.yview)
        h_scrollbar = ttk.Scrollbar(tables_frame, orient='horizontal', command=self.data_tree.xview)
        self.data_tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ
        self.data_tree.grid(row=0, column=0, sticky='nsew')
        v_scrollbar.grid(row=0, column=1, sticky='ns')
        h_scrollbar.grid(row=1, column=0, sticky='ew')
        
        tables_frame.grid_rowconfigure(0, weight=1)
        tables_frame.grid_columnconfigure(0, weight=1)
        
    def create_chat_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —á–∞—Ç–∞ —Å –ò–ò."""
        self.chat_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.chat_frame, text="üí¨ –ß–∞—Ç —Å –ò–ò")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.chat_frame, text="–ß–∞—Ç —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º –ò–ò", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è —á–∞—Ç–∞
        self.create_chat_controls()
        self.create_chat_display()
        
    def create_chat_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º."""
        controls_frame = ttk.LabelFrame(self.chat_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(controls_frame)
        buttons_frame.pack(fill='x')
        
        # –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
        self.clear_chat_btn = tk.Button(buttons_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", 
                                       command=self.clear_chat, 
                                       bg='#f44336', fg='white', font=('Arial', 10, 'bold'),
                                       width=15, height=2)
        self.clear_chat_btn.pack(side='left', padx=5, pady=5)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.save_chat_btn = tk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", 
                                      command=self.save_chat_history, 
                                      bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                      width=15, height=2)
        self.save_chat_btn.pack(side='left', padx=5, pady=5)
        
    def create_chat_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–∞."""
        chat_display_frame = ttk.LabelFrame(self.chat_frame, text="–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞", padding=10)
        chat_display_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_display = scrolledtext.ScrolledText(chat_display_frame, height=15, width=80, 
                                                     font=('Arial', 10))
        self.chat_display.pack(fill='both', expand=True)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = tk.Frame(chat_display_frame)
        input_frame.pack(fill='x', pady=10)
        
        self.chat_entry = tk.Entry(input_frame, font=('Arial', 12), width=60)
        self.chat_entry.pack(side='left', fill='x', expand=True, padx=(0, 5))
        self.chat_entry.bind('<Return>', lambda e: self.send_chat_message())
        
        self.send_btn = tk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
                                 command=self.send_chat_message, 
                                 bg='#2196F3', fg='white', font=('Arial', 10, 'bold'),
                                 width=10, height=2)
        self.send_btn.pack(side='right')
        
    def create_statistics_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.stats_frame, text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 
                              font=('Arial', 16, 'bold'), bg='#f0f0f0')
        title_label.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.create_stats_controls()
        self.create_stats_display()
        
    def create_stats_controls(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
        controls_frame = ttk.LabelFrame(self.stats_frame, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_stats_btn = tk.Button(controls_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                                          command=self.refresh_statistics, 
                                          bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'),
                                          width=20, height=2)
        self.refresh_stats_btn.pack(pady=5)
        
    def create_stats_display(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats_display_frame = ttk.LabelFrame(self.stats_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", padding=10)
        stats_display_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_display = scrolledtext.ScrolledText(stats_display_frame, height=20, width=80, 
                                                      font=('Arial', 10))
        self.stats_display.pack(fill='both', expand=True)
        
    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.log_message("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            # –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
            self.load_faiss_indexes()
            self.load_data_lookups()
            self.log_message("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            self.log_message("üí° –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤."""
        self.log_text.delete(1.0, tk.END)
        
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª."""
        filename = filedialog.asksaveasfilename(defaultextension=".txt", 
                                               filetypes=[("Text files", "*.txt")])
        if filename:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.log_text.get(1.0, tk.END))
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    def process_rtf_files(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ RTF —Ñ–∞–π–ª–æ–≤."""
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É RTF —Ñ–∞–π–ª–æ–≤...")
        self.overall_status_var.set("–û–±—Ä–∞–±–æ—Ç–∫–∞ RTF —Ñ–∞–π–ª–æ–≤...")
        
        def process_thread():
            try:
                import pipeline
                pipeline.process_thematic_folders()
                self.log_message("‚úÖ RTF —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.overall_status_var.set("RTF —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                self.overall_progress_var.set(25)
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RTF: {e}")
                self.overall_status_var.set("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ RTF")
        
        threading.Thread(target=process_thread, daemon=True).start()
    
    def create_embeddings(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º."""
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        self.overall_status_var.set("–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        
        def create_thread():
            try:
                from optimized_embedding_processor import OptimizedEmbeddingProcessor
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                processor = OptimizedEmbeddingProcessor(
                    batch_size=32,  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è RTX 3060
                    max_length=2048
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
                conn = get_db_connection()
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                cursor.execute("SELECT id FROM dialogs")
                dialog_ids = [row[0] for row in cursor.fetchall()]
                
                self.log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(dialog_ids)} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –±–∞—Ç—á–∞–º–∏
                embeddings = processor.process_dialogs_batch(dialog_ids, conn)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ –ë–î
                processor.save_embeddings_to_db(embeddings, "embeddings", conn)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ø–ª–∏–∫–∏
                cursor.execute("SELECT id FROM utterances")
                utterance_ids = [row[0] for row in cursor.fetchall()]
                
                self.log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(utterance_ids)} —Ä–µ–ø–ª–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ø–ª–∏–∫–∏ –±–∞—Ç—á–∞–º–∏
                utterance_embeddings = processor.process_utterances_batch(utterance_ids, conn)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–µ–ø–ª–∏–∫ –≤ –ë–î
                processor.save_embeddings_to_db(utterance_embeddings, "utterance_embeddings", conn)
                
                conn.close()
                
                self.log_message("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.overall_status_var.set("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã")
                self.overall_progress_var.set(50)
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
                self.overall_status_var.set("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        
        threading.Thread(target=create_thread, daemon=True).start()
    
    def create_hierarchical_dictionary(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
        self.overall_status_var.set("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è...")
        
        def create_dict_thread():
            try:
                # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Å txtai
                try:
                    from hier_dict import HierDict
                    from txtai import Embeddings
                    use_full_version = True
                    self.log_message("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Å txtai")
                except ImportError:
                    from hier_dict_simple import HierDictSimple as HierDict
                    use_full_version = False
                    self.log_message("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (txtai –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
                conn = get_db_connection()
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤
                cursor.execute("SELECT text FROM dialogs LIMIT 1000")  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                dialog_texts = [row[0] for row in cursor.fetchall()]
                
                if not dialog_texts:
                    self.log_message("‚ùå –ù–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è")
                    return
                
                self.log_message(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(dialog_texts)} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                if use_full_version:
                    # –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å txtai
                    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
                    self.log_message("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤...")
                    dial_emb = Embeddings({"path": "all-MiniLM-L6-v2", "content": True})
                    dial_emb.index(dialog_texts)
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    self.log_message("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
                    sentences = []
                    for text in dialog_texts:
                        sentences.extend([s.strip() for s in text.split('.') if s.strip()])
                    
                    sent_emb = Embeddings({"path": "all-MiniLM-L6-v2", "content": True})
                    sent_emb.index(sentences[:5000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ñ—Ä–∞–∑
                    self.log_message("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ñ—Ä–∞–∑...")
                    phrases = []
                    for text in dialog_texts:
                        phrases.extend([p.strip() for p in text.split() if len(p.strip()) > 2])
                    
                    phrase_emb = Embeddings({"path": "all-MiniLM-L6-v2", "content": True})
                    phrase_emb.index(phrases[:10000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
                    self.log_message("üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
                    hd = HierDict(dial_emb, sent_emb, phrase_emb, dialog_texts)
                else:
                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
                    self.log_message("üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
                    hd = HierDict(dialog_texts)
                
                # –°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å
                dictionary = hd.build("hierarchical_dictionary.json")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                precision = hd.test(k=5)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = hd.get_statistics()
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Smart Logger
                hd.export_to_smart_logger("smart_logger_dictionary.json")
                
                self.log_message("‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.log_message(f"üìä Precision@5: {precision:.2f}")
                self.log_message(f"üìö Parent —Å–ª–æ–≤: {stats.get('parent_words', 0)}")
                self.log_message(f"üìö Child —Å–ª–æ–≤: {stats.get('child_words', 0)}")
                self.log_message("üíæ –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: hierarchical_dictionary.json")
                self.log_message("üíæ Smart Logger –≤–µ—Ä—Å–∏—è: smart_logger_dictionary.json")
                
                self.overall_status_var.set("–°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω")
                self.overall_progress_var.set(75)
                
                conn.close()
                
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")
                self.overall_status_var.set("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è")
        
        threading.Thread(target=create_dict_thread, daemon=True).start()
    
    def build_indexes(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤."""
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        self.overall_status_var.set("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
        
        def build_thread():
            try:
                import indexer
                indexer.main()
                self.log_message("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.overall_status_var.set("–ò–Ω–¥–µ–∫—Å—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")
                self.overall_progress_var.set(75)
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
                self.overall_status_var.set("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤")
        
        threading.Thread(target=build_thread, daemon=True).start()
    
    def classify_phrases(self):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—Ä–∞–∑."""
        self.log_message("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ—Ä–∞–∑...")
        self.overall_status_var.set("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—Ä–∞–∑...")
        
        def classify_thread():
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
                self.log_message("‚úÖ –§—Ä–∞–∑—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                self.overall_status_var.set("–§—Ä–∞–∑—ã –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã")
                self.overall_progress_var.set(100)
            except Exception as e:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—Ä–∞–∑: {e}")
                self.overall_status_var.set("–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—Ä–∞–∑")
        
        threading.Thread(target=classify_thread, daemon=True).start()
    
    # –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
    def perform_search(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞."""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return
        
        self.log_message(f"üîç –ü–æ–∏—Å–∫: {query}")
        try:
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.clear_results()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = self.data_manager.search_utterances(query, limit=int(self.results_count_var.get()))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                self.results_tree.insert('', 'end', values=(
                    result.get('id', ''),
                    result.get('text', '')[:100] + '...' if len(result.get('text', '')) > 100 else result.get('text', ''),
                    result.get('speaker', ''),
                    result.get('dialog_id', ''),
                    result.get('source_theme', '')
                ))
            
            self.log_message(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    def perform_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞."""
        query = self.search_entry.get().strip()
        if not query:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        self.log_message(f"üìä –ê–Ω–∞–ª–∏–∑: {query}")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            method = self.analysis_method_var.get()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            results = self.data_manager.search_utterances(query, limit=10)
            
            if not results:
                self.log_message("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = "\n".join([f"{r['speaker']}: {r['text']}" for r in results])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            analysis_method = get_analysis_method(method)
            if analysis_method:
                analysis_result = analysis_method(analysis_text, {})
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                self.chat_display.insert(tk.END, f"=== –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê: {query} ===\n")
                self.chat_display.insert(tk.END, f"–ú–µ—Ç–æ–¥: {method}\n")
                self.chat_display.insert(tk.END, f"–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{analysis_result}\n\n")
                self.chat_display.see(tk.END)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                self.save_qa_pair(query, self.theme_var.get(), method, {}, analysis_result, results)
                
                self.log_message("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                self.log_message("‚ùå –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def clear_results(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        self.log_message("üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã")
    
    def on_result_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É."""
        item = self.results_tree.selection()[0]
        values = self.results_tree.item(item, 'values')
        self.log_message(f"üìã –í—ã–±—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {values[0]}")
    
    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
    def view_callback_phrases(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤."""
        self.log_message("üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤...")
        try:
            df = self.data_manager.get_callback_phrases_data(limit=1000)
            self.populate_data_tree(df)
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ñ—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã: {e}")
    
    def view_dialogs(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤."""
        self.log_message("üí¨ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...")
        try:
            df = self.data_manager.get_dialogs_data(limit=1000)
            self.populate_data_tree(df)
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –¥–∏–∞–ª–æ–≥–æ–≤")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏: {e}")
    
    def view_utterances(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–ø–ª–∏–∫."""
        self.log_message("üó£Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–ª–∏–∫...")
        try:
            df = self.data_manager.get_utterances_data(limit=1000)
            self.populate_data_tree(df)
            self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ä–µ–ø–ª–∏–∫")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–ø–ª–∏–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ø–ª–∏–∫–∏: {e}")
    
    def populate_data_tree(self, df):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö."""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.data_tree.get_children():
            self.data_tree.delete(item)
        
        if df.empty:
            return
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        columns = list(df.columns)
        self.data_tree['columns'] = columns
        for col in columns:
            self.data_tree.heading(col, text=col)
            self.data_tree.column(col, width=120)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏
        for index, row in df.iterrows():
            values = [str(row[col]) for col in columns]
            self.data_tree.insert('', 'end', values=values)
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö."""
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
        data_type = simpledialog.askstring("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                                          "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (dialogs/utterances/callback_phrases/qa_pairs):")
        if not data_type:
            return
        
        if data_type not in ['dialogs', 'utterances', 'callback_phrases', 'qa_pairs']:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        filetypes = [("CSV files", "*.csv"), ("JSON files", "*.json")]
        filename = filedialog.asksaveasfilename(defaultextension=".csv", 
                                               filetypes=filetypes)
        if not filename:
            return
        
        try:
            self.log_message(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç {data_type} –≤ {filename}")
            
            if filename.endswith('.csv'):
                success = self.data_manager.export_to_csv(data_type, filename)
            elif filename.endswith('.json'):
                success = self.data_manager.export_to_json(data_type, filename)
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                return
            
            if success:
                self.log_message("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    # –ú–µ—Ç–æ–¥—ã —á–∞—Ç–∞
    def send_chat_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç."""
        message = self.chat_entry.get().strip()
        if not message:
            return
        
        self.chat_display.insert(tk.END, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}\n")
        self.chat_entry.delete(0, tk.END)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò
        self.chat_display.insert(tk.END, f"–ê–Ω–∞–ª–∏—Ç–∏–∫: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ\n")
        self.chat_display.see(tk.END)
    
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞."""
        self.chat_display.delete(1.0, tk.END)
        self.log_message("üóëÔ∏è –ß–∞—Ç –æ—á–∏—â–µ–Ω")
    
    def save_chat_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
        filename = filedialog.asksaveasfilename(defaultextension=".txt", 
                                               filetypes=[("Text files", "*.txt")])
        if filename:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.chat_display.get(1.0, tk.END))
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    # –ú–µ—Ç–æ–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def refresh_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.log_message("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        try:
            stats = self.data_manager.get_statistics()
            self.display_statistics(stats)
            self.log_message("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    def display_statistics(self, stats):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats_display.delete(1.0, tk.END)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_display.insert(tk.END, "=== –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n\n")
        self.stats_display.insert(tk.END, f"üìä –î–∏–∞–ª–æ–≥–æ–≤: {stats.get('dialogs', 0):,}\n")
        self.stats_display.insert(tk.END, f"üó£Ô∏è –†–µ–ø–ª–∏–∫: {stats.get('utterances', 0):,}\n")
        self.stats_display.insert(tk.END, f"üß† –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {stats.get('embeddings', 0):,}\n")
        self.stats_display.insert(tk.END, f"üìù –§—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: {stats.get('callback_phrases', 0):,}\n")
        self.stats_display.insert(tk.END, f"‚ùì –ü–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç: {stats.get('qa_pairs', 0):,}\n\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º
        if 'themes' in stats and stats['themes']:
            self.stats_display.insert(tk.END, "=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ï–ú–ê–ú ===\n\n")
            for theme, count in stats['themes'].items():
                self.stats_display.insert(tk.END, f"üìÅ {theme}: {count:,} –¥–∏–∞–ª–æ–≥–æ–≤\n")
            self.stats_display.insert(tk.END, "\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ñ—Ä–∞–∑
        if 'phrase_categories' in stats and stats['phrase_categories']:
            self.stats_display.insert(tk.END, "=== –ö–ê–¢–ï–ì–û–†–ò–ò –§–†–ê–ó ===\n\n")
            category_names = {1: "–û—à–∏–±–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", 2: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", 3: "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±–µ—â–∞–Ω–∏—è"}
            for category, count in stats['phrase_categories'].items():
                name = category_names.get(int(category), f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category}")
                self.stats_display.insert(tk.END, f"üè∑Ô∏è {name}: {count:,} —Ñ—Ä–∞–∑\n")
            self.stats_display.insert(tk.END, "\n")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º –∞–Ω–∞–ª–∏–∑–∞
        if 'analysis_methods' in stats and stats['analysis_methods']:
            self.stats_display.insert(tk.END, "=== –ú–ï–¢–û–î–´ –ê–ù–ê–õ–ò–ó–ê ===\n\n")
            method_names = {
                'hierarchical': '–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π',
                'rolling': '–°–∫–æ–ª—å–∑—è—â–∏–π',
                'facts': '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤',
                'classification': '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è',
                'callback_classifier': '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤',
                'fast_phrase_classifier': '–ë—ã—Å—Ç—Ä—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ—Ä–∞–∑'
            }
            for method, count in stats['analysis_methods'].items():
                name = method_names.get(method, method)
                self.stats_display.insert(tk.END, f"üî¨ {name}: {count:,} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n")
            self.stats_display.insert(tk.END, "\n")
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.stats_display.insert(tk.END, "=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï ===\n\n")
        self.stats_display.insert(tk.END, f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        self.stats_display.insert(tk.END, f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_PATH}\n")
        self.stats_display.insert(tk.END, f"üß† –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {config.EMBEDDING_MODEL_NAME}\n")
        self.stats_display.insert(tk.END, f"ü§ñ LLM –º–æ–¥–µ–ª—å: {config.LLM_MODEL_NAME}\n")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è RTX 3060."""
        global MODEL
        try:
            self.log_message("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CUDA
            import torch
            if torch.cuda.is_available():
                device = "cuda"
                gpu_memory = torch.cuda.get_device_properties(0).total_memory / 1024**3
                self.log_message(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.get_device_name()}")
                self.log_message(f"üíæ –ü–∞–º—è—Ç—å GPU: {gpu_memory:.1f} GB")
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à CUDA
                torch.cuda.empty_cache()
            else:
                device = "cpu"
                self.log_message("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            model_name = config.EMBEDDING_MODEL_NAME
            try:
                MODEL = SentenceTransformer(model_name, device=device)
                MODEL.max_seq_length = 2048  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                
                # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è GPU
                if device == "cuda":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º mixed precision –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                    if hasattr(torch.cuda, 'amp'):
                        MODEL.half()
                        self.log_message("‚úÖ –í–∫–ª—é—á–µ–Ω mixed precision (float16)")
                    
                    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    torch.cuda.empty_cache()
                
                self.log_message(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ {device}")
                
            except OSError as e:
                if "–§–∞–π–ª –ø–æ–¥–∫–∞—á–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª" in str(e) or "1455" in str(e):
                    self.log_message("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–±—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    try:
                        MODEL = SentenceTransformer(model_name, device=device)
                        MODEL.max_seq_length = 512  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        self.log_message(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º 512")
                    except:
                        # Fallback –Ω–∞ –±–æ–ª–µ–µ –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å
                        fallback_model = "all-MiniLM-L6-v2"
                        MODEL = SentenceTransformer(fallback_model, device=device)
                        MODEL.max_seq_length = 256
                        self.log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {fallback_model}")
                else:
                    raise e
                    
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            MODEL = None
            self.log_message("‚ö†Ô∏è GUI –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    
    def load_faiss_indexes(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤."""
        global FAISS_INDEXES
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤
            self.log_message("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
    
    def load_data_lookups(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö."""
        global DIALOG_LOOKUP, UTTERANCE_LOOKUP
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            self.log_message("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    root = tk.Tk()
    app = CallCenterGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
