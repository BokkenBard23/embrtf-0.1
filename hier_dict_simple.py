"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Hierarchical Dictionary Builder
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç txtai –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import random
from collections import defaultdict
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
import logging
import numpy as np

logger = logging.getLogger(__name__)

class HierDictSimple:
    def __init__(self, texts):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
        
        Args:
            texts: List[str] ‚Äì –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        """
        self.texts = texts
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω HierDictSimple —Å {len(texts)} —Ç–µ–∫—Å—Ç–∞–º–∏")

    def _keywords(self, texts, top_k=20):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã.
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        """
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤
            word_count = defaultdict(int)
            for text in texts:
                words = text.lower().split()
                for word in words:
                    if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                        word_count[word] += 1
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
            sorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)
            keywords = [word for word, count in sorted_words[:top_k]]
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            return keywords
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            return []

    def build(self, out_file="simple_dict.json"):
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.
        
        Args:
            out_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å parent, child –∏ exclude —Å–ª–æ–≤–∞–º–∏
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            parent = self._keywords(self.texts, 15)
            child = self._keywords(self.texts, 15)
            
            # Exclude = —Å–ª–æ–≤–∞ —Å –Ω–∏–∑–∫–æ–π —á–∞—Å—Ç–æ—Ç–æ–π
            word_count = defaultdict(int)
            for text in self.texts:
                words = text.lower().split()
                for word in words:
                    if len(word) > 2:
                        word_count[word] += 1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ–≤–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π 1 (—Ä–µ–¥–∫–∏–µ)
            exclude = [word for word, count in word_count.items() if count == 1][:10]

            dictionary = {
                "parent": {"must": parent, "exclude": exclude},
                "child": {"must": child, "exclude": []},
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å
            with open(out_file, "w", encoding="utf8") as f:
                json.dump(dictionary, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Üí {out_file}")
            logger.info(f"Parent —Å–ª–æ–≤: {len(parent)}")
            logger.info(f"Child —Å–ª–æ–≤: {len(child)}")
            logger.info(f"Exclude —Å–ª–æ–≤: {len(exclude)}")
            
            return dictionary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")
            return {}

    def test(self, k=5):
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞.
        
        Args:
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞)
        """
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            
            # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞: –¥–æ–ª—è —Ç–µ–∫—Å—Ç–æ–≤ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            parent_words = set(self._keywords(self.texts, 10))
            relevant = sum(1 for text in self.texts if any(word in text.lower() for word in parent_words))
            quality = relevant / len(self.texts) if self.texts else 0
            
            logger.info(f"–ö–∞—á–µ—Å—Ç–≤–æ: {quality:.2f}")
            logger.info(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {relevant} –∏–∑ {len(self.texts)}")
            
            return quality
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return 0.0

    def get_statistics(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ª–æ–≤–∞—Ä—é.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            parent = self._keywords(self.texts, 15)
            child = self._keywords(self.texts, 15)
            
            return {
                "total_texts": len(self.texts),
                "parent_words": len(parent),
                "child_words": len(child),
                "parent_words_list": parent,
                "child_words_list": child
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def export_to_smart_logger(self, output_file="simple_smart_logger_dict.json"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Smart Logger.
        
        Args:
            output_file: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            dictionary = self.build(output_file)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Smart Logger
            smart_logger_dict = {
                "metadata": {
                    "created_by": "CallCenter AI v3 (Simple)",
                    "version": "1.0",
                    "total_texts": len(self.texts),
                    "description": "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"
                },
                "dictionary": dictionary
            }
            
            with open(output_file, "w", encoding="utf8") as f:
                json.dump(smart_logger_dict, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–°–ª–æ–≤–∞—Ä—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è Smart Logger ‚Üí {output_file}")
            return output_file
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Smart Logger: {e}")
            return None


# ---------- –ë—ã—Å—Ç—Ä—ã–π self-test ----------
if __name__ == "__main__":
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    import logging
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_texts = [
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏, —Ö–æ—Ç—è –æ–±–µ—â–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫.",
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Å—å.",
        "–ö–ª–∏–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ, –∂–¥—É –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é.",
        "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ –¥–≤–∞ –¥–Ω—è.",
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä.",
        "–ö–ª–∏–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ, –ø–æ–º–æ–≥–ª–æ!",
        "–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É—Å–ª—É–≥–∏.",
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: –û—Ñ–æ—Ä–º–ª—é –æ—Ç–º–µ–Ω—É, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π.",
        "–ö–ª–∏–µ–Ω—Ç: –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å.",
        "–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å.",
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.",
        "–ö–ª–∏–µ–Ω—Ç: –ü–æ–ª—É—á–∏–ª, —Å–ø–∞—Å–∏–±–æ!",
        "–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–ª–µ—Ç–∞–µ—Ç.",
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.",
        "–ö–ª–∏–µ–Ω—Ç: –û–±–Ω–æ–≤–∏–ª, —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    ]
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HierDictSimple...")
        
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
        hd = HierDictSimple(test_texts)
        
        # –°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å
        dictionary = hd.build("test_simple_dict.json")
        
        if dictionary:
            print("‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìö Parent —Å–ª–æ–≤: {len(dictionary.get('parent', {}).get('must', []))}")
            print(f"üìö Child —Å–ª–æ–≤: {len(dictionary.get('child', {}).get('must', []))}")
            print(f"üìö Exclude —Å–ª–æ–≤: {len(dictionary.get('parent', {}).get('exclude', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤
            parent_words = dictionary.get('parent', {}).get('must', [])
            child_words = dictionary.get('child', {}).get('must', [])
            exclude_words = dictionary.get('parent', {}).get('exclude', [])
            
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã Parent —Å–ª–æ–≤: {parent_words[:5]}")
            print(f"üìù –ü—Ä–∏–º–µ—Ä—ã Child —Å–ª–æ–≤: {child_words[:5]}")
            print(f"üìù –ü—Ä–∏–º–µ—Ä—ã Exclude —Å–ª–æ–≤: {exclude_words[:5]}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞...")
        quality = hd.test()
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: {quality:.2f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = hd.get_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  üìö –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: {stats.get('total_texts', 0)}")
        print(f"  üìö Parent —Å–ª–æ–≤: {stats.get('parent_words', 0)}")
        print(f"  üìö Child —Å–ª–æ–≤: {stats.get('child_words', 0)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Smart Logger
        print("\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Smart Logger...")
        output_file = hd.export_to_smart_logger("test_simple_smart_logger_dict.json")
        if output_file:
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
