# generate_callback_phrases_cloud_db.py
"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ OpenRouter API (DeepSeek V3.1). –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ë–î."""

import sqlite3
import json
import requests
import time
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENROUTER_API_KEY = "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"
MODEL = "deepseek/deepseek-chat-v3.1:free"  # DeepSeek V3.1 –≤–º–µ—Å—Ç–æ OpenAI
REQUESTS_PER_MINUTE = 20  # –õ–∏–º–∏—Ç OpenRouter
DELAY_BETWEEN_REQUESTS = 60.0 / REQUESTS_PER_MINUTE  # ~3 —Å–µ–∫—É–Ω–¥—ã

# –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = Path(__file__).parent
DATABASE_PATH = BASE_DIR / "db" / "call_center.db"  # –û—Å–Ω–æ–≤–Ω–∞—è –ë–î —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
OPENROUTER_DB_PATH = BASE_DIR / "db" / "callback_phrases_openrouter.db"  # –ù–æ–≤–∞—è –ë–î –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# –ü—Ä–æ–º–ø—Ç (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è .format())
PROMPT_TEMPLATE = """–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞ call-—Ü–µ–Ω—Ç—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω **–æ—à–∏–±–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞**.

–ü—Ä–∞–≤–∏–ª–∞:
1. –û—à–∏–±–∫–∞ –µ—Å—Ç—å, –µ—Å–ª–∏:
   - –ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å/—Å–≤—è–∑–∞—Ç—å—Å—è/–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è ‚Äî **—á—ë—Ç–∫–æ –∏ –±–µ–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏** (–±–µ–∑ —Å–ª–æ–≤ "–µ—Å–ª–∏ —á—Ç–æ", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "–∫–∞–∫-–Ω–∏–±—É–¥—å", "–Ω–µ –∑–Ω–∞—é", "—Å –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞").
   - –û–ø–µ—Ä–∞—Ç–æ—Ä **–ù–ï** –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫.

2. –û—à–∏–±–∫–∞ –ù–ï–¢, –µ—Å–ª–∏:
   - –ö–ª–∏–µ–Ω—Ç –¥–∞–ª **–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ** (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–µ—Å–ª–∏ —á—Ç–æ –ø–µ—Ä–µ–∑–≤–æ–Ω—é").
   - –û–ø–µ—Ä–∞—Ç–æ—Ä **–ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫** (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º", "–Ω–∞–∑–Ω–∞—á–∏–ª –∑–≤–æ–Ω–æ–∫ –Ω–∞ 15:00").

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥.
- –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –µ—Å—Ç—å ‚Äî –≤—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"error": true, "client_phrase": "–¥–æ—Å–ª–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞", "operator_phrase": ""}
- –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç ‚Äî –≤—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"error": false, "client_phrase": "–¥–æ—Å–ª–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)", "operator_phrase": "–¥–æ—Å–ª–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)"}

–í–ê–ñ–ù–û:
- –§—Ä–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –î–û–°–õ–û–í–ù–´–ú–ò, –∫–∞–∫ –≤ –¥–∏–∞–ª–æ–≥–µ.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –ø–∏—à–∏ "–¥—É–º–∞—é", –Ω–µ –¥–æ–±–∞–≤–ª—è–π markdown.
- –ï—Å–ª–∏ —Ñ—Ä–∞–∑ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É "".
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ—Ä–∞–∑—ã. –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.

–î–∏–∞–ª–æ–≥:
"""

def ensure_db_directories():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    os.makedirs(os.path.dirname(DATABASE_PATH), exist_ok=True)
    os.makedirs(os.path.dirname(OPENROUTER_DB_PATH), exist_ok=True)

def find_dialogs_table(cursor):
    """–ò—â–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
    tables = cursor.fetchall()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π id –∏ text
    for table in tables:
        table_name = table[0]
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        has_id = False
        has_text = False
        for column in columns:
            col_name = column[1].lower()
            if "id" in col_name:
                has_id = True
            if "text" in col_name or "content" in col_name:
                has_text = True
        
        if has_id and has_text:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏: {table_name}")
            return table_name
    
    print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    return None

def extract_phrases_with_openrouter(dialog_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ OpenRouter API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏."""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ë–ï–ó –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è .format() - –Ω–∞–ø—Ä—è–º—É—é –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    payload = {
        "model": MODEL,
        "messages": [
            {"role": "user", "content": PROMPT_TEMPLATE + dialog_text}
        ],
        "temperature": 0.1,
        "max_tokens": 2048
    }

    for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
        try:
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=60
            )

            if response.status_code == 200:
                result_text = response.json()["choices"][0]["message"]["content"]
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                try:
                    result = json.loads(result_text)
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —á–∏—Å—Ç—ã–π JSON, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –µ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    if '{' in result_text and '}' in result_text:
                        json_start = result_text.find('{')
                        json_end = result_text.rfind('}') + 1
                        json_str = result_text[json_start:json_end]
                        result = json.loads(json_str)
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç: {result_text}")
                        result = {"error": False, "client_phrase": "", "operator_phrase": ""}
                return result
                
            elif response.status_code == 404:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 404: API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.")
                return {"error": False, "client_phrase": "", "operator_phrase": ""}
            elif response.status_code == 429:
                retry_after = int(response.headers.get('Retry-After', 60))
                print(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç. –ñ–¥–µ–º {retry_after} —Å–µ–∫. (–ó–∞–≥–æ–ª–æ–≤–æ–∫ Retry-After)")
                time.sleep(retry_after)
                continue
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
                time.sleep(DELAY_BETWEEN_REQUESTS * 2)
                continue
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}")
            time.sleep(DELAY_BETWEEN_REQUESTS)
            continue

    return {"error": False, "client_phrase": "", "operator_phrase": "", "error_msg": "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å"}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤."""
    ensure_db_directories()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –û–°–ù–û–í–ù–û–ô –ë–î –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
    conn_main = sqlite3.connect(DATABASE_PATH)
    cursor_main = conn_main.cursor()
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
    dialogs_table = find_dialogs_table(cursor_main)
    if not dialogs_table:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏. –í—ã—Ö–æ–¥.")
        return
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –û–¢–î–ï–õ–¨–ù–û–ô –ë–î –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenRouter
    conn_openrouter = sqlite3.connect(OPENROUTER_DB_PATH)
    cursor_openrouter = conn_openrouter.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –Ω–æ–≤–æ–π –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor_openrouter.execute("""
        CREATE TABLE IF NOT EXISTS callback_phrases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            dialog_id TEXT NOT NULL,
            phrase TEXT NOT NULL,
            source TEXT NOT NULL,
            category INTEGER NOT NULL,
            frequency INTEGER DEFAULT 1,
            verified BOOLEAN DEFAULT 0,
            raw_response TEXT,
            processed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    cursor_main.execute(f"SELECT id, text FROM {dialogs_table}")
    dialogs = cursor_main.fetchall()
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î.")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–æ–≤
    processed_count = 0
    for i, (dialog_id, text) in enumerate(dialogs, 1):
        start_time = time.time()
        
        print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ {i}/{len(dialogs)} (ID: {dialog_id})...")
        result = extract_phrases_with_openrouter(text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î OpenRouter
        if result.get("client_phrase") or result.get("operator_phrase"):
            raw_response_str = json.dumps(result, ensure_ascii=False)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
            if result.get("error", False):
                source = "client_promise"
                category = 1  # –û—à–∏–±–∫–∞
            else:
                source = "client_uncertain"
                category = 3  # –ù–µ–Ω—É–∂–Ω—ã–π –∑–≤–æ–Ω–æ–∫
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –∫–ª–∏–µ–Ω—Ç–∞
            if result.get("client_phrase"):
                cursor_openrouter.execute("""
                    INSERT INTO callback_phrases (dialog_id, phrase, source, category, raw_response)
                    VALUES (?, ?, ?, ?, ?)
                """, (dialog_id, result["client_phrase"], source, category, raw_response_str))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if result.get("operator_phrase"):
                cursor_openrouter.execute("""
                    INSERT INTO callback_phrases (dialog_id, phrase, source, category, raw_response)
                    VALUES (?, ?, 'operator_offer', 2, ?)
                """, (dialog_id, result["operator_phrase"], raw_response_str))
                
            conn_openrouter.commit()
            processed_count += 1
            print(f"‚úÖ –î–∏–∞–ª–æ–≥ {dialog_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        else:
            print(f"‚ÑπÔ∏è –î–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–∞–∑.")
        
        # –í—ã–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        processing_time = time.time() - start_time
        if processing_time < DELAY_BETWEEN_REQUESTS:
            sleep_time = DELAY_BETWEEN_REQUESTS - processing_time
            print(f"‚è≥ –û–∂–∏–¥–∞–µ–º {sleep_time:.2f} —Å–µ–∫. –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞...")
            time.sleep(sleep_time)
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn_main.close()
    conn_openrouter.close()
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –¥–∏–∞–ª–æ–≥–æ–≤. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {OPENROUTER_DB_PATH}")

if __name__ == "__main__":
    main()