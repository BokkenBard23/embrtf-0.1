#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π."""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π."""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤–∞—Ä–µ–π")
        print("=" * 60)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler("hier_dict_test.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            import pandas as pd
            print("‚úÖ pandas –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            print("‚ùå pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return 1
        
        try:
            from sklearn.metrics.pairwise import cosine_similarity
            print("‚úÖ scikit-learn –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError as e:
            print(f"‚ùå scikit-learn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            return 1
        
        try:
            from txtai import Embeddings
            print("‚úÖ txtai –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError as e:
            print(f"‚ùå txtai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            return 1
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
        from hier_dict import HierDict
        print("‚úÖ hier_dict –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_texts = [
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏, —Ö–æ—Ç—è –æ–±–µ—â–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫.",
            "–û–ø–µ—Ä–∞—Ç–æ—Ä: –ü—Ä–æ–≤–µ—Ä—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Å—å.",
            "–ö–ª–∏–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ, –∂–¥—É –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é.",
            "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ –¥–≤–∞ –¥–Ω—è.",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä.",
            "–ö–ª–∏–µ–Ω—Ç: –°–ø–∞—Å–∏–±–æ, –ø–æ–º–æ–≥–ª–æ!",
            "–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É—Å–ª—É–≥–∏.",
            "–û–ø–µ—Ä–∞—Ç–æ—Ä: –û—Ñ–æ—Ä–º–ª—é –æ—Ç–º–µ–Ω—É, –¥–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π.",
            "–ö–ª–∏–µ–Ω—Ç: –û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å.",
            "–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å.",
            "–û–ø–µ—Ä–∞—Ç–æ—Ä: –û—Ç–ø—Ä–∞–≤–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.",
            "–ö–ª–∏–µ–Ω—Ç: –ü–æ–ª—É—á–∏–ª, —Å–ø–∞—Å–∏–±–æ!",
            "–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–ª–µ—Ç–∞–µ—Ç.",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.",
            "–ö–ª–∏–µ–Ω—Ç: –û–±–Ω–æ–≤–∏–ª, —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        ]
        
        print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {len(test_texts)}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        
        # –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        dial_emb = Embeddings({"path": "all-MiniLM-L6-v2", "content": True})
        dial_emb.index(test_texts)
        print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        sentences = []
        for text in test_texts:
            sentences.extend([s.strip() for s in text.split('.') if s.strip()])
        
        sent_emb = Embeddings({"path": "all-MiniLM-L6-v2", "content": True})
        sent_emb.index(sentences)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã ({len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)")
        
        # –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ñ—Ä–∞–∑
        phrases = []
        for text in test_texts:
            phrases.extend([p.strip() for p in text.split() if len(p.strip()) > 2])
        
        phrase_emb = Embeddings({"path": "all-MiniLM-L6-v2", "content": True})
        phrase_emb.index(phrases)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ñ—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω—ã ({len(phrases)} —Ñ—Ä–∞–∑)")
        
        # –°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å
        print("\nüîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è...")
        hd = HierDict(dial_emb, sent_emb, phrase_emb, test_texts)
        
        # –°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å
        dictionary = hd.build("test_hierarchical_dict.json")
        
        if dictionary:
            print("‚úÖ –°–ª–æ–≤–∞—Ä—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìö Parent —Å–ª–æ–≤: {len(dictionary.get('parent', {}).get('must', []))}")
            print(f"üìö Child —Å–ª–æ–≤: {len(dictionary.get('child', {}).get('must', []))}")
            print(f"üìö Exclude —Å–ª–æ–≤: {len(dictionary.get('parent', {}).get('exclude', []))}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–ª–æ–≤
            parent_words = dictionary.get('parent', {}).get('must', [])
            child_words = dictionary.get('child', {}).get('must', [])
            exclude_words = dictionary.get('parent', {}).get('exclude', [])
            
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã Parent —Å–ª–æ–≤: {parent_words[:5]}")
            print(f"üìù –ü—Ä–∏–º–µ—Ä—ã Child —Å–ª–æ–≤: {child_words[:5]}")
            print(f"üìù –ü—Ä–∏–º–µ—Ä—ã Exclude —Å–ª–æ–≤: {exclude_words[:5]}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞...")
        precision = hd.test(k=3)
        print(f"‚úÖ Precision@3: {precision:.2f}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = hd.get_statistics()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  üìö –í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤: {stats.get('total_texts', 0)}")
        print(f"  üìö Parent —Å–ª–æ–≤: {stats.get('parent_words', 0)}")
        print(f"  üìö Child —Å–ª–æ–≤: {stats.get('child_words', 0)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è Smart Logger
        print("\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Smart Logger...")
        output_file = hd.export_to_smart_logger("test_smart_logger_dict.json")
        if output_file:
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
