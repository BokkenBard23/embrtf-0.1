# generate_callback_phrases_multi_model.py
"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ 55 FREE –º–æ–¥–µ–ª–µ–π OpenRouter –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""

import sqlite3
import json
import config
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import time
import random

# –ü—Ä–æ–º–ø—Ç (—Ç–æ—Ç –∂–µ, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ)
PROMPT_TEMPLATE = """–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞ call-—Ü–µ–Ω—Ç—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω **–æ—à–∏–±–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞**.

–ü—Ä–∞–≤–∏–ª–∞:
1. –û—à–∏–±–∫–∞ –µ—Å—Ç—å, –µ—Å–ª–∏:
   - –ö–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å/—Å–≤—è–∑–∞—Ç—å—Å—è/–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è ‚Äî **—á—ë—Ç–∫–æ –∏ –±–µ–∑ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏** (–±–µ–∑ —Å–ª–æ–≤ ‚Äú–µ—Å–ª–∏ —á—Ç–æ‚Äù, ‚Äú–º–æ–∂–µ—Ç –±—ã—Ç—å‚Äù, ‚Äú–∫–∞–∫-–Ω–∏–±—É–¥—å‚Äù, ‚Äú–Ω–µ –∑–Ω–∞—é‚Äù, ‚Äú—Å –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä–∞‚Äù).
   - –û–ø–µ—Ä–∞—Ç–æ—Ä **–ù–ï** –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫.

2. –û—à–∏–±–∫–∞ –ù–ï–¢, –µ—Å–ª–∏:
   - –ö–ª–∏–µ–Ω—Ç –¥–∞–ª **–Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ** (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äú–µ—Å–ª–∏ —á—Ç–æ –ø–µ—Ä–µ–∑–≤–æ–Ω—é‚Äù).
   - –û–ø–µ—Ä–∞—Ç–æ—Ä **–ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫** (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚Äú–º—ã –≤–∞–º –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º‚Äù, ‚Äú–Ω–∞–∑–Ω–∞—á–∏–ª –∑–≤–æ–Ω–æ–∫ –Ω–∞ 15:00‚Äù).

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥.
- –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –µ—Å—Ç—å ‚Äî –≤—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"error": true, "client_phrase": "–¥–æ—Å–ª–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞", "operator_phrase": ""}
- –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç ‚Äî –≤—ã–≤–µ–¥–∏ –¢–û–õ–¨–ö–û –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {"error": false, "client_phrase": "–¥–æ—Å–ª–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)", "operator_phrase": "–¥–æ—Å–ª–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –±—ã–ª–∞)"}

–í–ê–ñ–ù–û:
- –§—Ä–∞–∑—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –î–û–°–õ–û–í–ù–´–ú–ò, –∫–∞–∫ –≤ –¥–∏–∞–ª–æ–≥–µ.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –ø–∏—à–∏ "–¥—É–º–∞—é", –Ω–µ –¥–æ–±–∞–≤–ª—è–π markdown.
- –ï—Å–ª–∏ —Ñ—Ä–∞–∑ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É "".
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ—Ä–∞–∑—ã. –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ.

–î–∏–∞–ª–æ–≥:
{dialog_text}
"""

def extract_phrases_with_llm(dialog_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ —Å–ª—É—á–∞–π–Ω—É—é FREE –º–æ–¥–µ–ª—å OpenRouter —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    headers = {
        "Authorization": f"Bearer {config.OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    for model in config.OPENROUTER_FREE_MODELS:
        for attempt in range(3):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                payload = {
                    "model": model,
                    "messages": [
                        {"role": "user", "content": PROMPT_TEMPLATE.format(dialog_text=dialog_text)}
                    ],
                    "temperature": 0.1,
                    "max_tokens": 2048
                }

                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=60
                )

                if response.status_code == 200:
                    result_text = response.json()["choices"][0]["message"]["content"]
                    result = json.loads(result_text)
                    return result
                elif response.status_code == 429:
                    print(f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model}. –ñ–¥—ë–º 5 —Å–µ–∫...")
                    time.sleep(5)
                    continue
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code} –æ—Ç {model}: {response.text}")
                    break  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª–∏
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {model} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {e}")
                time.sleep(2)
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏

    return {"error": False, "client_phrase": "", "operator_phrase": "", "error_msg": "–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏"}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect(config.DATABASE_PATH)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS callback_phrases (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        phrase TEXT NOT NULL UNIQUE,
        source TEXT NOT NULL,
        category INTEGER NOT NULL,
        frequency INTEGER DEFAULT 1,
        verified BOOLEAN DEFAULT 0
    );
""")

cursor.execute("SELECT id, text FROM dialogs")
dialogs = cursor.fetchall()
print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")

def process_single_dialog(dialog_id, text):
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ ID: {dialog_id}...")
    result = extract_phrases_with_llm(text)

    if result.get("client_phrase"):
        if result["error"]:
            source = "client_promise"
            category = 1
        else:
            source = "client_uncertain"
            category = 3
        cursor.execute("""
            INSERT OR IGNORE INTO callback_phrases (phrase, source, category, frequency, verified)
            VALUES (?, ?, ?, 1, 0)
        """, (result["client_phrase"], source, category))
        cursor.execute("""
            UPDATE callback_phrases SET frequency = frequency + 1 WHERE phrase = ?
        """, (result["client_phrase"],))
    
    if result.get("operator_phrase"):
        cursor.execute("""
            INSERT OR IGNORE INTO callback_phrases (phrase, source, category, frequency, verified)
            VALUES (?, ?, 2, 1, 0)
        """, (result["operator_phrase"], "operator_offer"))
        cursor.execute("""
            UPDATE callback_phrases SET frequency = frequency + 1 WHERE phrase = ?
        """, (result["operator_phrase"],))

    return dialog_id

# === –ó–ê–ü–£–°–ö –° 55 –ü–û–¢–û–ö–ê–ú–ò ===
with ThreadPoolExecutor(max_workers=55) as executor:
    futures = [executor.submit(process_single_dialog, dialog_id, text) for dialog_id, text in dialogs]
    
    for i, future in enumerate(as_completed(futures), 1):
        dialog_id = future.result()
        if i % 10 == 0:
            conn.commit()
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i} –¥–∏–∞–ª–æ–≥–æ–≤.")

conn.commit()
conn.close()

print("‚úÖ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –§—Ä–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É 'callback_phrases'.")